TRUE ~ ""
)
data1 = data.frame(
Method = c("GPC", "Win Ratio (WR)", "Win Odds (WO)"),
Estimate = c(Delta_obs, WR_obs, WO_obs),
Z_score = c(z_GPC, z_WR, z_WO),
P_value = c(p_value_GPC, p_value_WR, p_value_WO),
Signif. = c(signif_GPC, signif_WR, signif_WO)
)
data2 = data.frame(
Method = c("GPC", "WR", "WO"),
CI_lower = c(CI_GPC[1], CI_WR[1], CI_WO[1]),
CI_upper = c(CI_GPC[2], CI_WR[2], CI_WO[2])
)
stopCluster(cl)
return(list(results = data1, confidence_intervals = data2))
}
set.seed(4) # 4 donne une p-valeur supéreiur à 1
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
GPC_WO_WR_strata(treatmentdata,controldata, threshold = 0.2, p.val="two.sided", n_perm = 1000, strata=strata, histo = T)
# GPC_WO_WR necesiite les package doParallele, parallele et foreach
# rentre en argument treatmentdata le nouveau traitrement, controldata le traitement de contrôle, threshold le seuil,
#   p.val le test unilatéral ou bilatéral et n_perm le nombre de permutation
# donne en sortie une liste de 3 dataframe avec les résultats de la GPC, des WR et des WO et leur p-valeur,
#    l'intervalle de confiance pour ces 3 valeurs et le nombre de win,lose et tie
GPC_WO_WR_strata = function(treatmentdata, controldata, threshold = 0, p.val = c("one.sided", "two.sided"), n_perm = 1000, strata=NULL, histo=TRUE) {
n_cores = parallel::detectCores()/2
cl = makeCluster(n_cores)
registerDoParallel(cl)
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
col = colnames(treatmentdata)
if (is.null(strata)){
L = ncol(treatmentdata)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = rbind(treatmentdata, controldata)
comp = data.frame(groupe = groupe, outcome = comp)
} else {
L = ncol(treatmentdata)-1
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
af=affect_crit_strata(treatmentdata = treatmentdata, controldata = controldata, threshold = threshold, strata = strata)
if(is.null(strata)){
paire=af$paire_glob
} else {
paire=af$paire_strata
}
stat_init = calcul_stat_strata(paire, strata = strata)
z_WR=af$Z
N_w = stat_init[1]
N_l = stat_init[2]
N_t = stat_init[3]
Delta_obs = round((N_w - N_l) / (N_w+N_l+N_t), 3)
WR_obs = round(N_w/N_l,3)
WO_obs = round((N_w+0.5*N_t)/(N_l+0.5*N_t),3)
Delta_perm=rep(0, n_perm)
Delta_perm_res = foreach(p = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
.export = c("eval_diff","affect_crit_strata", "calcul_stat_strata", "type_variable", "extract_tte")) %dopar% {
set.seed(p)
if(is.null(strata)){
comp_perm=comp
comp_perm$groupe = sample(comp_perm$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit_strata(compT, compC, threshold,strata)$paire_global
}else {
comp_perm=comp
comp_perm$groupe_permute <- ave(comp_perm$groupe, comp_perm$strata, FUN = function(x) sample(x))
sum(comp_perm$groupe_permute=="T" & comp_perm$strata==8)
compT = subset(comp_perm, groupe_permute == "T")[,-c(1,L+3)]
compC = subset(comp_perm, groupe_permute == "C")[,-c(1,L+3)]
paire_perm  = affect_crit_strata(compT, compC, threshold,strata)$paire_strata
}
stat_perm = calcul_stat_strata(paire_perm, strata = strata)
N_w_perm = stat_perm[1]
N_l_perm = stat_perm[2]
N_t_perm = stat_perm[3]
Delta_perm = (N_w_perm - N_l_perm) / (N_w_perm + N_l_perm + N_t_perm)
return(unname(Delta_perm))
}
Delta_perm = Delta_perm_res
quantile_GPC = quantile(Delta_perm, c(0.025, 0.975), na.rm = TRUE)
CI_GPC = c(Delta_obs + quantile_GPC[1], Delta_obs + quantile_GPC[2])
CI_WR = exp(log(WR_obs) + c(-1.96, 1.96) * sqrt(1/N_w + 1/N_l))
CI_WO = exp(log(WO_obs) + c(-1.96, 1.96) * sqrt(1/N_w + 1/N_l + 1/(n1*n2)))
if(histo){
hist(Delta_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation)",
xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(-1, 1))
abline(v = Delta_obs, col = "red", lwd = 2, lty = 2)
abline(v=CI_GPC[1], col = "green", lwd = 2, lty = 2)
abline(v=CI_GPC[2], col = "green", lwd = 2, lty = 2)
abline(v=0, col='black', lwd = 2)
legend('topright', col=c("green","red","black"), legend = c("95% CI", "Δ_obs", "H0"), lwd=c(2,2,1), lty = c(2,2,1))
}
#sigma_GPC = 1/2*(quantile_GPC[2]-quantile_GPC[2])/1.96
s1= sum(Delta_perm >=Delta_obs)
s2 = sum(abs(Delta_perm)>=abs(Delta_obs))
var_log_WO = (N_w + N_l + N_t) / ((N_w + 0.5 * N_t) * (N_l + 0.5 * N_t))
SD_log_WO = sqrt(var_log_WO)
z_WO = log(WO_obs) / SD_log_WO
#p_value_GPC = ifelse(p.val == "one.sided", pnorm(-Delta_obs/sigma_GPC), 2*pnorm(-Delta_obs/sigma_GPC))
p_value_GPC = ifelse(p.val == "one.sided", s1/n_perm, s2/n_perm)
p_value_WR = ifelse(p.val == "one.sided", 1-pnorm(z_WR), 2*(1-pnorm(abs(z_WR))))
p_value_WO = ifelse(p.val == "one.sided", 1-pnorm(z_WO), 2*(1-pnorm(abs(z_WO))))
signif_GPC = dplyr::case_when(
p_value_GPC < 0.001 ~ "***",
p_value_GPC < 0.01 ~ "**",
p_value_GPC < 0.05 ~ "*",
TRUE ~ ""
)
signif_WR = dplyr::case_when(
p_value_WR < 0.001 ~ "***",
p_value_WR < 0.01 ~ "**",
p_value_WR < 0.05 ~ "*",
TRUE ~ ""
)
signif_WO = dplyr::case_when(
p_value_WO < 0.001 ~ "***",
p_value_WO < 0.01 ~ "**",
p_value_WO < 0.05 ~ "*",
TRUE ~ ""
)
data1 = data.frame(
Method = c("GPC", "Win Ratio (WR)", "Win Odds (WO)"),
Estimate = c(Delta_obs, WR_obs, WO_obs),
Z_score = c(".", z_WR, z_WO),
P_value = c(p_value_GPC, p_value_WR, p_value_WO),
Signif. = c(signif_GPC, signif_WR, signif_WO)
)
data2 = data.frame(
Method = c("GPC", "WR", "WO"),
CI_lower = c(CI_GPC[1], CI_WR[1], CI_WO[1]),
CI_upper = c(CI_GPC[2], CI_WR[2], CI_WO[2])
)
stopCluster(cl)
return(list(results = data1, confidence_intervals = data2))
}
set.seed(4) # 4 donne une p-valeur supéreiur à 1
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
GPC_WO_WR_strata(treatmentdata,controldata, threshold = 0.2, p.val="two.sided", n_perm = 1000, strata=strata, histo = T)
setwd("~/comparaison-par-paire/R")
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
n_sim = 50
nb_core = (parallel::detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel"), .export = c("eval_diff", "affect_crit_strata", "calcul_stat_strata", "type_variable", "extract_tte")) %dopar% {
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata, threshold = 0.2, histo=FALSE)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
n_sim = 50
nb_core = (parallel::detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel"), .export = c("eval_diff", "affect_crit_strata", "calcul_stat_strata", "type_variable", "extract_tte")) %dopar% {
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata, threshold = 0.2, histo=FALSE)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
colnames(results_df) = c("val_GPC", "val_WR", "val_WO", "p_val_GPC", "p_val_WR", "p_val_WO")
values_long <- results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "value") %>%
mutate(metric = recode(metric,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
pvals_long <- results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "p_value") %>%
mutate(metric = recode(metric,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
ggplot(values_long, aes(x = value, fill = metric)) +
geom_density(alpha = 0.6) +
facet_wrap(~metric, scales = "free") +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution des p-valeurs ",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_jitter(width = 0.15, size = 1.5, color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution des p-valeurs",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
sum(pvals_long$metric=="GPC" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WO" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WR" & pvals_long$p_value < 0.05)
n_sim = 100
nb_core = (parallel::detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel"), .export = c("eval_diff", "affect_crit_strata", "calcul_stat_strata", "type_variable", "extract_tte")) %dopar% {
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata, threshold = 0.2, histo=FALSE)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
colnames(results_df) = c("val_GPC", "val_WR", "val_WO", "p_val_GPC", "p_val_WR", "p_val_WO")
values_long <- results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "value") %>%
mutate(metric = recode(metric,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
pvals_long <- results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "p_value") %>%
mutate(metric = recode(metric,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
ggplot(values_long, aes(x = value, fill = metric)) +
geom_density(alpha = 0.6) +
facet_wrap(~metric, scales = "free") +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution des p-valeurs ",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_jitter(width = 0.15, size = 1.5, color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution des p-valeurs",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
sum(pvals_long$metric=="GPC" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WO" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WR" & pvals_long$p_value < 0.05)
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
### On regarde le nb d'outcome
if (is.null(strata)) {
L = ncol(treatmentdata)
} else {
L = ncol(treatmentdata) - 1
}
col = colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)) {
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
} else {
type1 <- type_variable(treatmentdata[, -which(colnames(treatmentdata) == "strata")], L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe,
outcome = rbind(treatmentdata[, -which(colnames(treatmentdata) == "strata")],
controldata[, -which(colnames(controldata) == "strata")]),
strata = c(treatmentdata[["strata"]], controldata[["strata"]]))
}
comp
colnames(comp)[which(colnames(comp) == "groupe")] <- "groupe"
outcome_cols <- colnames(comp)[grep("outcome", colnames(comp))]
for (l in 1:L) {
if (l <= length(outcome_cols)) {
colnames(comp)[which(colnames(comp) == outcome_cols[l])] <- paste("Y_", l, sep = "")
}
}
if ("strata" %in% colnames(comp)) {
colnames(comp)[which(colnames(comp) == "strata")] <- "strata"
}
comp
comp = comp[order(comp[["strata"]]), ]
comp
matrices_list = list() # les listes de paires
U_list = list() # les listes de la matrice U_ijk
TT_list = list() # les listes des quantités T qui sont T=sum_(1:N)U_iD_i où D_i=1 si i est dans le grp tr et 0 sinon
V_list = list()
for (s in unique(comp$strata)) {
comp_s = subset(comp, strata == s) # on crée un data set par strate
n_T = sum(comp_s$groupe == "T")
n_C = sum(comp_s$groupe == "C")
U = matrix(0, ncol = n_T, nrow = n_C) # la matrice U_ijk
if (n_T > 0 & n_C > 0) {
pairs = expand.grid(i = 1:n_T, j = 1:n_C)
indices_T = which(comp_s$groupe == "T")
indices_C = which(comp_s$groupe == "C")
paire = matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] = sapply(1:nrow(pairs), function(idx) {
eval_diff(pairs$i[idx], pairs$j[idx], l, type1, comp_s, threshold) # on évalue chaque paire de patient
})
}
for (idx in 1:nrow(pairs)) {
i <- pairs$i[idx]
j <- pairs$j[idx]
ligne_paire <- paire[idx, ]
ligne_paire[is.na(ligne_paire)] <- "non-informative"
res <- ligne_paire[ligne_paire != "non-informative"][1] # on trie les valeurs noon-informative pour prendre le critère suivant
if (!is.na(res)) {
U[j, i] <- ifelse(res == "favorable", 1,
ifelse(res == "défavorable", -1, 0))
} else {
U[j, i] <- 0
}
}
V_T = rowSums(U, na.rm = TRUE) # On crée le vecteur V des patients avec le nv. tr.
V_C = colSums(U, na.rm = TRUE) # On crée le vecteur V des patients avec le tr. de contrôle
V_f = sum(V_T + V_C)
TT = sum(V_T)
V = ((n_T * n_C) / ((n_T + n_C) * (n_T + n_C - 1))) * sum(V_f^2)
V_list[[paste0("strata_", s)]] = V
TT_list[[paste0("strata_", s)]] = TT
matrices_list[[paste0("strata_", s)]] = paire
U_list[[s]] = U
}
}
View(matrices_list)
View(TT_list)
View(U_list)
View(V_list)
U_list[[1]]
U_list[[3]]
U_list[[6]]
for (s in unique(comp$strata)) {
comp_s = subset(comp, strata == s) # on crée un data set par strate
n_T = sum(comp_s$groupe == "T")
n_C = sum(comp_s$groupe == "C")
U = matrix(0, ncol = n_T, nrow = n_C) # la matrice U_ijk
if (n_T > 0 & n_C > 0) {
pairs = expand.grid(i = 1:n_T, j = 1:n_C)
indices_T = which(comp_s$groupe == "T")
indices_C = which(comp_s$groupe == "C")
paire = matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] = sapply(1:nrow(pairs), function(idx) {
eval_diff(pairs$i[idx], pairs$j[idx], l, type1, comp_s, threshold) # on évalue chaque paire de patient
})
}
for (idx in 1:nrow(pairs)) {
i <- pairs$i[idx]
j <- pairs$j[idx]
ligne_paire <- paire[idx, ]
ligne_paire[is.na(ligne_paire)] <- "non-informative"
res <- ligne_paire[ligne_paire != "non-informative"][1] # on trie les valeurs noon-informative pour prendre le critère suivant
if (!is.na(res)) {
U[j, i] <- ifelse(res == "favorable", 1,
ifelse(res == "défavorable", -1, 0))
} else {
U[j, i] <- 0
}
}
V_T = rowSums(U, na.rm = TRUE) # On crée le vecteur V des patients avec le nv. tr.
V_C = colSums(U, na.rm = TRUE) # On crée le vecteur V des patients avec le tr. de contrôle
V_f = sum(V_T + V_C)
TT = sum(V_T)
V = ((n_T * n_C) / ((n_T + n_C) * (n_T + n_C - 1))) * sum(V_f^2)
V_list[[paste0("strata_", s)]] = V
TT_list[[paste0("strata_", s)]] = TT
matrices_list[[paste0("strata_", s)]] = paire
U_list[[paste0("strata_", s)]] = U
}
}
matrices_list[["all"]] = do.call(rbind, matrices_list) # On crée la matrice de paire globale
#U_list[["all"]] = do.call(rbind, U_list)
V = do.call(sum, V_list)# lorsque l'on stratifie, les variance s'ajoutent
TT = do.call(sum, TT_list)
Z=TT/sqrt(V)
mu1 = 2.5
sigma1 = 1.5
mu2 = 2.5
sigma2 = 1.5
x = seq(mu1 - 4*sigma1, mu1 + 4*sigma1, length.out = 100)
y1 = dnorm(x, mean = mu1, sd = sigma1)
y2 = dnorm(x, mean = mu2, sd = sigma2)
plot(x, y1, type = "l", lwd = 2, col = "blue",
main = "Densités des lois normales",
xlab = "x", ylab = "Densité")
lines(x, y2, lwd = 2, col = "red")
legend('topright', legend=c("T","C"), col=c("blue", "red"), lwd=c(2,2))
treatmentdata
n_sim = 50
nb_core = (parallel::detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel"), .export = c("eval_diff", "affect_crit_strata", "calcul_stat_strata", "type_variable", "extract_tte")) %dopar% {
strata = sample(rep(c(1,3,5,8), each = 10))
treatmentdata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata, threshold = 0.5, histo=FALSE)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
colnames(results_df) = c("val_GPC", "val_WR", "val_WO", "p_val_GPC", "p_val_WR", "p_val_WO")
values_long <- results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "value") %>%
mutate(metric = recode(metric,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
pvals_long <- results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "metric", values_to = "p_value") %>%
mutate(metric = recode(metric,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
ggplot(values_long, aes(x = value, fill = metric)) +
geom_density(alpha = 0.6) +
facet_wrap(~metric, scales = "free") +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
labs(title = "Distribution des p-valeurs ",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
ggplot(pvals_long, aes(x = metric, y = p_value, fill = metric)) +
geom_violin(trim = FALSE, alpha = 0.6) +
geom_jitter(width = 0.15, size = 1.5, color = "black", alpha = 0.8) +
theme_minimal() +
labs(title = "Distribution des p-valeurs",
x = "Test", y = "p-valeur") +
scale_fill_manual(values = c("orange", "purple", "cyan"))
sum(pvals_long$metric=="GPC" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WO" & pvals_long$p_value < 0.05)
sum(pvals_long$metric=="WR" & pvals_long$p_value < 0.05)
