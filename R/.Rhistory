pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
final_matrix <- matrices_list[["all"]]
return(final_matrix)
}
affect_crit_strata(treatmentdata,controldata, strata)
affect_crit_strata <- function(treatmentdata, controldata, threshold = 0, strata = NULL) {
n1 <- nrow(treatmentdata)
n2 <- nrow(controldata)
if (is.null(strata)){
L <- ncol(treatmentdata)
} else {L <- ncol(treatmentdata)-1}
colnames <- colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)){
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
type1 <- type_variable(treatmentdata[,-which(colnames=="strata")], L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(colnames=="strata")], controldata[,-which(colnames=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
if (!is.null(strata)) {
if (any(strata %in% colnames(comp))) {
stop("La colonne strata spécifiée n'existe pas dans les données")
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
}
eval_diff <- function(i, j, l) {
if (type1[l] == "tte") {
t_obs1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 1]
censure1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 2]
t_obs2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 1]
censure2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 2]
diff_tte <- t_obs1[i] - t_obs2[j]
if (censure1[i] == 0 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable",
ifelse(diff_tte < -threshold, "défavorable", "neutre")))
} else if (censure1[i] == 1 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable", "non-informative"))
} else if (censure1[i] == 0 && censure2[j] == 1) {
return(ifelse(diff_tte > threshold, "non-informative", "défavorable"))
} else {
return("non-informative")
}
}
if (type1[l] == "continue") {
diff <- comp[groupe == "T","outcome.X"][i] - comp[groupe == "C", "outcome.X"][j]
return(ifelse(diff > threshold, "favorable",
ifelse(diff < -threshold, "défavorable", "neutre")))
}
if (type1[l] == "binaire") {
return(ifelse(comp[groupe == "T", l + 1][i] == 1 & comp[groupe == "C", l + 1][j] == 0, "favorable",
ifelse(comp[groupe == "T", l + 1][i] == 0 & comp[groupe == "C", l + 1][j] == 1, "défavorable", "neutre")))
}
}
matrices_list <- list()
if (is.null(strata)) {
pairs <- expand.grid(i = 1:n1, j = 1:n2)
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
matrices_list[["all"]] <- paire
} else if (!is.null(strata)) {
# Liste pour stocker les matrices des différentes strates
matrices_list <- list()
for (s in unique(comp$strata)) {
comp_s <- comp[comp$strata == s, ]  # Sélection de la strate s
n_T <- sum(comp_s$groupe == "T")  # Nb de T
n_C <- sum(comp_s$groupe == "C")  # Nb de C
if (n_T > 0 & n_C > 0) {  # Vérifier que la strate contient les deux groupes
pairs <- expand.grid(i = 1:n_T, j = 1:n_C)  # Paires locales
# Conversion des indices relatifs en indices globaux
indices_T <- which(comp_s$strata == s & comp_s$groupe == "T")
indices_C <- which(comp_s$strata == s & comp_s$groupe == "C")
pairs$i <- indices_T[pairs$i]
pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- sapply(1:nrow(pairs), function(idx) eval_diff(pairs$i[idx], pairs$j[idx], l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
final_matrix <- matrices_list[["all"]]
return(final_matrix)
}
affect_crit_strata(treatmentdata,controldata, strata)
affect_crit_strata <- function(treatmentdata, controldata, threshold = 0, strata = NULL) {
n1 <- nrow(treatmentdata)
n2 <- nrow(controldata)
if (is.null(strata)){
L <- ncol(treatmentdata)
} else {L <- ncol(treatmentdata)-1}
col <- colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)){
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
type1 <- type_variable(treatmentdata[,-which(col=="strata")], L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
if (!is.null(strata)) {
if (!any(strata %in% colnames(comp))) {
stop("La colonne strata spécifiée n'existe pas dans les données")
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
}
eval_diff <- function(i, j, l) {
if (type1[l] == "tte") {
t_obs1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 1]
censure1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 2]
t_obs2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 1]
censure2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 2]
diff_tte <- t_obs1[i] - t_obs2[j]
if (censure1[i] == 0 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable",
ifelse(diff_tte < -threshold, "défavorable", "neutre")))
} else if (censure1[i] == 1 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable", "non-informative"))
} else if (censure1[i] == 0 && censure2[j] == 1) {
return(ifelse(diff_tte > threshold, "non-informative", "défavorable"))
} else {
return("non-informative")
}
}
if (type1[l] == "continue") {
diff <- comp[comp$groupe == "T", "outcome.X"][i] - comp[comp$groupe == "C", "outcome.X"][j]
return(ifelse(diff > threshold, "favorable",
ifelse(diff < -threshold, "défavorable", "neutre")))
}
if (type1[l] == "binaire") {
return(ifelse(comp[groupe == "T", l + 1][i] == 1 & comp[groupe == "C", l + 1][j] == 0, "favorable",
ifelse(comp[groupe == "T", l + 1][i] == 0 & comp[groupe == "C", l + 1][j] == 1, "défavorable", "neutre")))
}
}
matrices_list <- list()
if (is.null(strata)) {
pairs <- expand.grid(i = 1:n1, j = 1:n2)
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
matrices_list[["all"]] <- paire
} else if (!is.null(strata)) {
# Liste pour stocker les matrices des différentes strates
matrices_list <- list()
for (s in unique(comp$strata)) {
comp_s <- comp[comp$strata == s, ]  # Sélection de la strate s
n_T <- sum(comp_s$groupe == "T")  # Nb de T
n_C <- sum(comp_s$groupe == "C")  # Nb de C
if (n_T > 0 & n_C > 0) {  # Vérifier que la strate contient les deux groupes
pairs <- expand.grid(i = 1:n_T, j = 1:n_C)  # Paires locales
# Conversion des indices relatifs en indices globaux
indices_T <- which(comp_s$strata == s & comp_s$groupe == "T")
indices_C <- which(comp_s$strata == s & comp_s$groupe == "C")
pairs$i <- indices_T[pairs$i]
pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- sapply(1:nrow(pairs), function(idx) eval_diff(pairs$i[idx], pairs$j[idx], l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
final_matrix <- matrices_list[["all"]]
return(final_matrix)
}
affect_crit_strata(treatmentdata,controldata, strata)
is.null(strata)
treatmentdata = T_1_4
controldata= C_1_4
strata=rep(c(1,3,5,8), each=10)
treatmentdata=cbind(treatmentdata,strata)
controldata=cbind(controldata,strata)
threshold = 0
n1 <- nrow(treatmentdata)
n2 <- nrow(controldata)
if (is.null(strata)){
L <- ncol(treatmentdata)
} else {L <- ncol(treatmentdata)-1}
col <- colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)){
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
if (!is.null(strata)) {
if (!any(strata %in% colnames(comp))) {
stop("La colonne strata spécifiée n'existe pas dans les données")
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
View(comp)
eval_diff <- function(i, j, l) {
if (type1[l] == "tte") {
t_obs1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 1]
censure1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 2]
t_obs2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 1]
censure2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 2]
diff_tte <- t_obs1[i] - t_obs2[j]
if (censure1[i] == 0 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable",
ifelse(diff_tte < -threshold, "défavorable", "neutre")))
} else if (censure1[i] == 1 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable", "non-informative"))
} else if (censure1[i] == 0 && censure2[j] == 1) {
return(ifelse(diff_tte > threshold, "non-informative", "défavorable"))
} else {
return("non-informative")
}
}
if (type1[l] == "continue") {
diff <- comp[comp$groupe == "T", "outcome.X"][i] - comp[comp$groupe == "C", "outcome.X"][j]
return(ifelse(diff > threshold, "favorable",
ifelse(diff < -threshold, "défavorable", "neutre")))
}
if (type1[l] == "binaire") {
return(ifelse(comp[groupe == "T", l + 1][i] == 1 & comp[groupe == "C", l + 1][j] == 0, "favorable",
ifelse(comp[groupe == "T", l + 1][i] == 0 & comp[groupe == "C", l + 1][j] == 1, "défavorable", "neutre")))
}
}
matrices_list <- list()
if (is.null(strata)) {
pairs <- expand.grid(i = 1:n1, j = 1:n2)
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
matrices_list[["all"]] <- paire
} else if (!is.null(strata)) {
matrices_list <- list()
for (s in unique(comp$strata)) {
comp_s <- comp[comp$strata == s, ]
n_T <- sum(comp_s$groupe == "T")
n_C <- sum(comp_s$groupe == "C")
if (n_T > 0 & n_C > 0) {
pairs <- expand.grid(i = 1:n_T, j = 1:n_C)  # Paires locales
# Conversion des indices relatifs en indices globaux
indices_T <- which(comp_s$strata == s & comp_s$groupe == "T")
indices_C <- which(comp_s$strata == s & comp_s$groupe == "C")
pairs$i <- indices_T[pairs$i]
pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- sapply(1:nrow(pairs), function(idx) eval_diff(pairs$i[idx], pairs$j[idx], l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
matrices_list[["strata_1"]]
matrices_list[["strata_3"]]
final_matrix <- matrices_list[["all"]]
final_matrix
affect_crit_strata <- function(treatmentdata, controldata, threshold = 0, strata = NULL) {
n1 <- nrow(treatmentdata)
n2 <- nrow(controldata)
if (is.null(strata)){
L <- ncol(treatmentdata)
} else {L <- ncol(treatmentdata)-1}
col <- colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)){
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
type1 <- type_variable(treatmentdata[,-which(col=="strata")], L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
if (!is.null(strata)) {
if (!any(strata %in% colnames(comp))) {
stop("La colonne strata spécifiée n'existe pas dans les données")
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
}
eval_diff <- function(i, j, l) {
if (type1[l] == "tte") {
t_obs1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 1]
censure1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 2]
t_obs2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 1]
censure2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 2]
diff_tte <- t_obs1[i] - t_obs2[j]
if (censure1[i] == 0 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable",
ifelse(diff_tte < -threshold, "défavorable", "neutre")))
} else if (censure1[i] == 1 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable", "non-informative"))
} else if (censure1[i] == 0 && censure2[j] == 1) {
return(ifelse(diff_tte > threshold, "non-informative", "défavorable"))
} else {
return("non-informative")
}
}
if (type1[l] == "continue") {
diff <- comp[comp$groupe == "T", "outcome.X"][i] - comp[comp$groupe == "C", "outcome.X"][j]
return(ifelse(diff > threshold, "favorable",
ifelse(diff < -threshold, "défavorable", "neutre")))
}
if (type1[l] == "binaire") {
return(ifelse(comp[groupe == "T", l + 1][i] == 1 & comp[groupe == "C", l + 1][j] == 0, "favorable",
ifelse(comp[groupe == "T", l + 1][i] == 0 & comp[groupe == "C", l + 1][j] == 1, "défavorable", "neutre")))
}
}
matrices_list <- list()
if (is.null(strata)) {
pairs <- expand.grid(i = 1:n1, j = 1:n2)
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
matrices_list[["all"]] <- paire
} else if (!is.null(strata)) {
matrices_list <- list()
for (s in unique(comp$strata)) {
comp_s <- comp[comp$strata == s, ]
n_T <- sum(comp_s$groupe == "T")
n_C <- sum(comp_s$groupe == "C")
if (n_T > 0 & n_C > 0) {
pairs <- expand.grid(i = 1:n_T, j = 1:n_C)  # Paires locales
# Conversion des indices relatifs en indices globaux
indices_T <- which(comp_s$strata == s & comp_s$groupe == "T")
indices_C <- which(comp_s$strata == s & comp_s$groupe == "C")
pairs$i <- indices_T[pairs$i]
pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- sapply(1:nrow(pairs), function(idx) eval_diff(pairs$i[idx], pairs$j[idx], l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
final_matrix <- matrices_list[["all"]]
return(final_matrix)
}
affect_crit_strata(treatmentdata,controldata, strata)
affect_crit_strata(treatmentdata,controldata, strata=strata)
treatmentdata = T_1_4
controldata= C_1_4
strat=rep(c(1,3,5,8), each=10)
treatmentdata=cbind(treatmentdata,strat)
controldata=cbind(controldata,strat)
threshold = 0
affect_crit_strata(treatmentdata,controldata, strata=strat)
treatmentdata = T_1_4
controldata= C_1_4
strata=rep(c(1,3,5,8), each=10)
treatmentdata=cbind(treatmentdata,strata)
controldata=cbind(controldata,strata)
threshold = 0
affect_crit_strata <- function(treatmentdata, controldata, threshold = 0, strata = NULL) {
n1 <- nrow(treatmentdata)
n2 <- nrow(controldata)
if (is.null(strata)){
L <- ncol(treatmentdata)
} else {L <- ncol(treatmentdata)-1}
col <- colnames(treatmentdata)
if (ncol(treatmentdata) != ncol(controldata)) {
stop("Il n'y a pas le même nombre d'outcomes")
}
if (is.null(strata)){
type1 <- type_variable(treatmentdata, L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
type1 <- type_variable(treatmentdata[,-which(col=="strata")], L)
groupe <- as.factor(rep(c("T", "C"), c(n1, n2)))
comp <- data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
if (!is.null(strata)) {
if (!any(strata %in% colnames(comp))) {
stop("La colonne strata spécifiée n'existe pas dans les données")
}
comp <- comp[order(comp[["strata"]]), ]
comp <- comp[, !(colnames(comp) %in% strata)]
}
eval_diff <- function(i, j, l) {
if (type1[l] == "tte") {
t_obs1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 1]
censure1 <- extract_tte(comp[groupe == "T", ], l + 1)[, 2]
t_obs2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 1]
censure2 <- extract_tte(comp[groupe == "C", ], l + 1)[, 2]
diff_tte <- t_obs1[i] - t_obs2[j]
if (censure1[i] == 0 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable",
ifelse(diff_tte < -threshold, "défavorable", "neutre")))
} else if (censure1[i] == 1 && censure2[j] == 0) {
return(ifelse(diff_tte > threshold, "favorable", "non-informative"))
} else if (censure1[i] == 0 && censure2[j] == 1) {
return(ifelse(diff_tte > threshold, "non-informative", "défavorable"))
} else {
return("non-informative")
}
}
if (type1[l] == "continue") {
diff <- comp[comp$groupe == "T", "outcome.X"][i] - comp[comp$groupe == "C", "outcome.X"][j]
return(ifelse(diff > threshold, "favorable",
ifelse(diff < -threshold, "défavorable", "neutre")))
}
if (type1[l] == "binaire") {
return(ifelse(comp[groupe == "T", l + 1][i] == 1 & comp[groupe == "C", l + 1][j] == 0, "favorable",
ifelse(comp[groupe == "T", l + 1][i] == 0 & comp[groupe == "C", l + 1][j] == 1, "défavorable", "neutre")))
}
}
matrices_list <- list()
if (is.null(strata)) {
pairs <- expand.grid(i = 1:n1, j = 1:n2)
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- mapply(eval_diff, pairs$i, pairs$j, MoreArgs = list(l = l))
}
matrices_list[["all"]] <- paire
} else if (!is.null(strata)) {
matrices_list <- list()
for (s in unique(comp$strata)) {
comp_s <- comp[comp$strata == s, ]
n_T <- sum(comp_s$groupe == "T")
n_C <- sum(comp_s$groupe == "C")
if (n_T > 0 & n_C > 0) {
pairs <- expand.grid(i = 1:n_T, j = 1:n_C)  # Paires locales
# Conversion des indices relatifs en indices globaux
indices_T <- which(comp_s$strata == s & comp_s$groupe == "T")
indices_C <- which(comp_s$strata == s & comp_s$groupe == "C")
pairs$i <- indices_T[pairs$i]
pairs$j <- indices_C[pairs$j]
# Matrice pour stocker les résultats
paire <- matrix("", nrow = nrow(pairs), ncol = L)
for (l in 1:L) {
paire[, l] <- sapply(1:nrow(pairs), function(idx) eval_diff(pairs$i[idx], pairs$j[idx], l))
}
# Stocker la matrice avec un nom associé à la strate
matrices_list[[paste0("strata_", s)]] <- paire
}
}
# Fusionner toutes les matrices des strates en un seul grand tableau
matrices_list[["all"]] <- do.call(rbind, matrices_list)
}
final_matrix <- matrices_list[["all"]]
return(final_matrix)
}
affect_crit_strata(treatmentdata,controldata, strata=strat)
head(treatmentdata)
affect_crit_strata(treatmentdata,controldata, strata=strata)
strata=as.character(rep(c(1,3,5,8), each=10))
treatmentdata=cbind(treatmentdata,strata)
controldata=cbind(controldata,strata)
affect_crit_strata(treatmentdata,controldata, strata=strata)
