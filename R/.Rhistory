quantileWO_upr=quantile(WO, 0.975)
étendue_WO= round(quantileWO_upr - quantileWO_lwr,4)
c(quantileWO_lwr, quantileWO_upr, quantileWO_upr - quantileWO_lwr )
quantileGPC2_lwr=quantile(GPC_trans, 0.025)
quantileGPC2_upr=quantile(GPC_trans, 0.975)
c(quantileGPC2_lwr, quantileGPC2_upr, quantileGPC2_upr - quantileGPC2_lwr )
colnames(results_df) = c("val_GPC", "val_WR","val_WO" ,"p_val_GPC", "p_val_WR", "p_val_WO","Win_Edp1","Loose_Edp1","Tie_Edp1","Win_Edp2","Loose_Edp2","Tie_Edp2","Win_Edp3","Loose_Edp3","Tie_Edp3")
Win   = round(c(mean(as.numeric(results_df$Win_Edp1)), mean(as.numeric(results_df$Win_Edp2)), mean(as.numeric(results_df$Win_Edp3)), mean(as.numeric(results_df$Win_Edp1)) + mean(as.numeric(results_df$Win_Edp2)) +mean(as.numeric(results_df$Win_Edp3)) ))
Loose = round(c(mean(as.numeric(results_df$Loose_Edp1)), mean(as.numeric(results_df$Loose_Edp2)),mean(as.numeric(results_df$Loose_Edp3)), mean(as.numeric(results_df$Loose_Edp1))+mean(as.numeric(results_df$Loose_Edp2)) +mean(as.numeric(results_df$Loose_Edp3)) ))
Tie   = round(c(mean(as.numeric(results_df$Tie_Edp1)), mean(as.numeric(results_df$Tie_Edp2)), mean(as.numeric(results_df$Tie_Edp3)), mean(as.numeric(results_df$Tie_Edp3)) ))
df231_2 = data.frame(
row.names = c("endpoint1", "endpoint2",  "endpoint3","overall"),
Win   = Win,
Loose = Loose,
Tie   = Tie,
WR = round(Win/Loose,5),
WO = round((Win+0.5*Tie)/(Loose+0.5*Tie),5),
GPC = round((Win-Loose)/(Win+Loose+Tie),5),
GPC_trans = round(((Win-Loose)/(Win+Loose+Tie)+1)/(1-(Win-Loose)/(Win+Loose+Tie)),5)
)
View(df231_2)
write.csv(df231_2, file = "df231_2.csv")
pvals_long = results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "p_value") %>%
mutate(method = recode(method,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
pvals_long$p_value = unlist(pvals_long$p_value)
vlines = data.frame(
method = c("GPC", "WR", "WO"),
intercept = c(0, 1, 1),
linetype_label = "Hypothèse H0")
values_long = results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "value") %>%
mutate(method = recode(method,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
values_long$value = unlist(values_long$value)
values_long <- values_long %>% filter(!is.infinite(value))
ggplot(values_long, aes(x = value, fill = method)) +
geom_density(alpha = 0.6, color = "black") +
geom_vline(data = vlines, aes(xintercept = intercept, linetype = linetype_label),
color = "black", lwd = 1) +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_linetype_manual(name = "", values = c("Hypothèse H0" = "dashed")) +
scale_fill_manual(values = c("orange", "purple", "cyan"))+ coord_cartesian(xlim = c(-1, 5))+
annotate("text", x = 4.5, y = 1.1, label = paste("Étendue GPC : ", étendue_GPC), color = "orange", hjust = 1) +
annotate("text", x = 4.5, y = 1.5, label = paste("Étendue WR : ", étendue_WR), color = "purple", hjust = 1) +
annotate("text", x = 4.5, y = 2.1, label = paste("Étendue WO : ", étendue_WO), color = "cyan", hjust = 1)
#ggsave("Rplot1_11.pdf", device = "pdf", path = "../plots")
p_val_GPC=subset(pvals_long, method=="GPC")
p_val_WO=subset(pvals_long, method=="WO")
p_val_WR=subset(pvals_long, method=="WR")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour la GPC : ",100*sum(p_val_GPC$p_value < 0.05)/nrow(p_val_GPC),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WR : ",100*sum(p_val_WR$p_value < 0.05)/nrow(p_val_WR),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WO : ",100*sum(p_val_WO$p_value < 0.05)/nrow(p_val_WO),"% \n")
n_sim = 2000
n=200
nb_core = parallel::detectCores() - 2
cl = makeCluster(nb_core)
registerDoParallel(cl)
count = 0
start_time = Sys.time()
lambda = c(0.5,0.1,0.05)
k = c(0.5, 0.1, 0.05)
beta = c(0.5, 0.4, 0.3, 0.7)
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel", "WINS"), .export = c("win.stat")) %dopar% {
set.seed(s)
id=1:(2*n)
arm=rep(c("T","C"), each=200)
U = runif(2*n)
lambdaT = 0.1
kT = 0.1
Z = ifelse(arm == "T", 1, 0)
beta = 0.3
prob_T = 0.65
prob_C = 0.35
mean_T = 3
mean_C = 2
sd_T = 2
sd_C = 2
Time_1 = round((-log(1 - U)) / (lambdaT * exp(beta * Z)^(1 / kT)),3)
fup_censureT = round(rweibull(n, shape = 1, scale =1),3)
Time_T = pmin(Time_1, fup_censureT)
deltaT=as.numeric(fup_censureT==Time_T)
Y_2_T=as.numeric(gener_binom(prob = prob_T)[,1] )-1
Y_2_C=as.numeric(gener_binom(prob = prob_C)[,1] )-1
Y_3_T= gener_continue(mean = mean_T, sd = sd_T)
Y_3_C= gener_continue(mean = mean_C, sd = sd_C)
stratum=sample(rep(c(1,3,5,8), each = 50))
dataT=data.frame(Y_1 = Time_T[Z==1], Delta_1 = deltaT[Z==1], Y_2 = Y_2_T, Y_3 = Y_3_T, stratum = stratum)
dataC=data.frame(Y_1 = Time_T[Z==0], Delta_1 = deltaT[Z==0], Y_2 = Y_2_C, Y_3 = Y_3_C, stratum = stratum)
data1=rbind(dataT,dataC)
data=data.frame(id=id, arm = arm, Y_1= data1[,1],Delta_1=data1[,2], Y_2 = data1[,3], Y_3 = data1[,4], stratum = data1[,5] )
result =
win.stat(
data = data,
ep_type = c("tte", "binary", "continuous"),
stratum.weight = "equal",
tau = c(1,0,1),
arm.name = c("T", "C"),
alpha = 0.05,
digit = 3,
pvalue = "two-sided",
priority = c(2, 1, 3),
summary.print = FALSE
)
win_edp1=sum(result$summary_ep$Trt_Endpoint1[,2])
loose_edp1=sum(result$summary_ep$Con_Endpoint1[,2])
tie_edp1=4*2500-sum(win_edp1+loose_edp1)
win_edp2=sum(result$summary_ep$Trt_Endpoint2[,2])
loose_edp2=sum(result$summary_ep$Con_Endpoint2[,2])
tie_edp2=tie_edp1-(loose_edp2+win_edp2)
win_edp3 = sum(result$summary_ep$Trt_Endpoint3[,2])
loose_edp3 = sum(result$summary_ep$Con_Endpoint3[,2])
tie_edp3 = tie_edp2-(win_edp3+loose_edp3)
count = count + 1
write.table(c(count), file="../output.txt", append = T, col.names = F)
val_GPC = result$Win_statistic$Net_Benefit[1]
val_WR  = result$Win_statistic$Win_Ratio[1]
val_WO  = result$Win_statistic$Win_Odds[1]
p_val_GPC = result$p_value[2]
p_val_WR  = result$p_value[1]
p_val_WO  = result$p_value[3]
return(unname(c(val_GPC,val_WR,val_WO,p_val_GPC, p_val_WR, p_val_WO,win_edp1,loose_edp1,tie_edp1,win_edp2,loose_edp2,tie_edp2,win_edp3,loose_edp3,tie_edp3)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
GPC=as.numeric(results_df[,1])
WR= as.numeric(results_df[,2])
WO= as.numeric(results_df[,3])
GPC_trans = (GPC+1)/(1-GPC)
quantileGPC_lwr=quantile(GPC, 0.025)
quantileGPC_upr=quantile(GPC, 0.975)
étendue_GPC= round(quantileGPC_upr - quantileGPC_lwr,4)
c(quantileGPC_lwr, quantileGPC_upr, quantileGPC_upr - quantileGPC_lwr )
quantileWR_lwr=quantile(WR, 0.025)
quantileWR_upr=quantile(WR, 0.975)
étendue_WR= round(quantileWR_upr - quantileWR_lwr,4)
c(quantileWR_lwr, quantileWR_upr, quantileWR_upr - quantileWR_lwr )
quantileWO_lwr=quantile(WO, 0.025)
quantileWO_upr=quantile(WO, 0.975)
étendue_WO= round(quantileWO_upr - quantileWO_lwr,4)
c(quantileWO_lwr, quantileWO_upr, quantileWO_upr - quantileWO_lwr )
quantileGPC2_lwr=quantile(GPC_trans, 0.025)
quantileGPC2_upr=quantile(GPC_trans, 0.975)
c(quantileGPC2_lwr, quantileGPC2_upr, quantileGPC2_upr - quantileGPC2_lwr )
colnames(results_df) = c("val_GPC", "val_WR","val_WO" ,"p_val_GPC", "p_val_WR", "p_val_WO","Win_Edp1","Loose_Edp1","Tie_Edp1","Win_Edp2","Loose_Edp2","Tie_Edp2","Win_Edp3","Loose_Edp3","Tie_Edp3")
Win   = round(c(mean(as.numeric(results_df$Win_Edp1)), mean(as.numeric(results_df$Win_Edp2)), mean(as.numeric(results_df$Win_Edp3)), mean(as.numeric(results_df$Win_Edp1)) + mean(as.numeric(results_df$Win_Edp2)) +mean(as.numeric(results_df$Win_Edp3)) ))
Loose = round(c(mean(as.numeric(results_df$Loose_Edp1)), mean(as.numeric(results_df$Loose_Edp2)),mean(as.numeric(results_df$Loose_Edp3)), mean(as.numeric(results_df$Loose_Edp1))+mean(as.numeric(results_df$Loose_Edp2)) +mean(as.numeric(results_df$Loose_Edp3)) ))
Tie   = round(c(mean(as.numeric(results_df$Tie_Edp1)), mean(as.numeric(results_df$Tie_Edp2)), mean(as.numeric(results_df$Tie_Edp3)), mean(as.numeric(results_df$Tie_Edp3)) ))
df213_2 = data.frame(
row.names = c("endpoint1", "endpoint2",  "endpoint3","overall"),
Win   = Win,
Loose = Loose,
Tie   = Tie,
WR = round(Win/Loose,5),
WO = round((Win+0.5*Tie)/(Loose+0.5*Tie),5),
GPC = round((Win-Loose)/(Win+Loose+Tie),5),
GPC_trans = round(((Win-Loose)/(Win+Loose+Tie)+1)/(1-(Win-Loose)/(Win+Loose+Tie)),5)
)
View(df213_2)
write.csv(df213_2, file = "df213_2.csv")
pvals_long = results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "p_value") %>%
mutate(method = recode(method,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
pvals_long$p_value = unlist(pvals_long$p_value)
vlines = data.frame(
method = c("GPC", "WR", "WO"),
intercept = c(0, 1, 1),
linetype_label = "Hypothèse H0")
values_long = results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "value") %>%
mutate(method = recode(method,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
values_long$value = unlist(values_long$value)
values_long <- values_long %>% filter(!is.infinite(value))
ggplot(values_long, aes(x = value, fill = method)) +
geom_density(alpha = 0.6, color = "black") +
geom_vline(data = vlines, aes(xintercept = intercept, linetype = linetype_label),
color = "black", lwd = 1) +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_linetype_manual(name = "", values = c("Hypothèse H0" = "dashed")) +
scale_fill_manual(values = c("orange", "purple", "cyan"))+ coord_cartesian(xlim = c(-1, 5))+
annotate("text", x = 4.5, y = 1.1, label = paste("Étendue GPC : ", étendue_GPC), color = "orange", hjust = 1) +
annotate("text", x = 4.5, y = 1.5, label = paste("Étendue WR : ", étendue_WR), color = "purple", hjust = 1) +
annotate("text", x = 4.5, y = 2.1, label = paste("Étendue WO : ", étendue_WO), color = "cyan", hjust = 1)
#ggsave("Rplot1_11.pdf", device = "pdf", path = "../plots")
p_val_GPC=subset(pvals_long, method=="GPC")
p_val_WO=subset(pvals_long, method=="WO")
p_val_WR=subset(pvals_long, method=="WR")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour la GPC : ",100*sum(p_val_GPC$p_value < 0.05)/nrow(p_val_GPC),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WR : ",100*sum(p_val_WR$p_value < 0.05)/nrow(p_val_WR),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WO : ",100*sum(p_val_WO$p_value < 0.05)/nrow(p_val_WO),"% \n")
n_sim = 2000
n=200
nb_core = parallel::detectCores() - 2
cl = makeCluster(nb_core)
registerDoParallel(cl)
count = 0
start_time = Sys.time()
lambda = c(0.5,0.1,0.05)
k = c(0.5, 0.1, 0.05)
beta = c(0.5, 0.4, 0.3, 0.7)
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel", "WINS"), .export = c("win.stat")) %dopar% {
set.seed(s)
id=1:(2*n)
arm=rep(c("T","C"), each=200)
U = runif(2*n)
lambdaT = 0.1
kT = 0.1
Z = ifelse(arm == "T", 1, 0)
beta = 0.3
prob_T = 0.65
prob_C = 0.35
mean_T = 3
mean_C = 2
sd_T = 2
sd_C = 2
Time_1 = round((-log(1 - U)) / (lambdaT * exp(beta * Z)^(1 / kT)),3)
fup_censureT = round(rweibull(n, shape = 1, scale =1),3)
Time_T = pmin(Time_1, fup_censureT)
deltaT=as.numeric(fup_censureT==Time_T)
Y_2_T=as.numeric(gener_binom(prob = prob_T)[,1] )-1
Y_2_C=as.numeric(gener_binom(prob = prob_C)[,1] )-1
Y_3_T= gener_continue(mean = mean_T, sd = sd_T)
Y_3_C= gener_continue(mean = mean_C, sd = sd_C)
stratum=sample(rep(c(1,3,5,8), each = 50))
dataT=data.frame(Y_1 = Time_T[Z==1], Delta_1 = deltaT[Z==1], Y_2 = Y_2_T, Y_3 = Y_3_T, stratum = stratum)
dataC=data.frame(Y_1 = Time_T[Z==0], Delta_1 = deltaT[Z==0], Y_2 = Y_2_C, Y_3 = Y_3_C, stratum = stratum)
data1=rbind(dataT,dataC)
data=data.frame(id=id, arm = arm, Y_1= data1[,1],Delta_1=data1[,2], Y_2 = data1[,3], Y_3 = data1[,4], stratum = data1[,5] )
result =
win.stat(
data = data,
ep_type = c("tte", "binary", "continuous"),
stratum.weight = "equal",
tau = c(1,0,1),
arm.name = c("T", "C"),
alpha = 0.05,
digit = 3,
pvalue = "two-sided",
priority = c(3, 1, 2),
summary.print = FALSE
)
win_edp1=sum(result$summary_ep$Trt_Endpoint1[,2])
loose_edp1=sum(result$summary_ep$Con_Endpoint1[,2])
tie_edp1=4*2500-sum(win_edp1+loose_edp1)
win_edp2=sum(result$summary_ep$Trt_Endpoint2[,2])
loose_edp2=sum(result$summary_ep$Con_Endpoint2[,2])
tie_edp2=tie_edp1-(loose_edp2+win_edp2)
win_edp3 = sum(result$summary_ep$Trt_Endpoint3[,2])
loose_edp3 = sum(result$summary_ep$Con_Endpoint3[,2])
tie_edp3 = tie_edp2-(win_edp3+loose_edp3)
count = count + 1
write.table(c(count), file="../output.txt", append = T, col.names = F)
val_GPC = result$Win_statistic$Net_Benefit[1]
val_WR  = result$Win_statistic$Win_Ratio[1]
val_WO  = result$Win_statistic$Win_Odds[1]
p_val_GPC = result$p_value[2]
p_val_WR  = result$p_value[1]
p_val_WO  = result$p_value[3]
return(unname(c(val_GPC,val_WR,val_WO,p_val_GPC, p_val_WR, p_val_WO,win_edp1,loose_edp1,tie_edp1,win_edp2,loose_edp2,tie_edp2,win_edp3,loose_edp3,tie_edp3)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
GPC=as.numeric(results_df[,1])
WR= as.numeric(results_df[,2])
WO= as.numeric(results_df[,3])
GPC_trans = (GPC+1)/(1-GPC)
quantileGPC_lwr=quantile(GPC, 0.025)
quantileGPC_upr=quantile(GPC, 0.975)
étendue_GPC= round(quantileGPC_upr - quantileGPC_lwr,4)
c(quantileGPC_lwr, quantileGPC_upr, quantileGPC_upr - quantileGPC_lwr )
quantileWR_lwr=quantile(WR, 0.025)
quantileWR_upr=quantile(WR, 0.975)
étendue_WR= round(quantileWR_upr - quantileWR_lwr,4)
c(quantileWR_lwr, quantileWR_upr, quantileWR_upr - quantileWR_lwr )
quantileWO_lwr=quantile(WO, 0.025)
quantileWO_upr=quantile(WO, 0.975)
étendue_WO= round(quantileWO_upr - quantileWO_lwr,4)
c(quantileWO_lwr, quantileWO_upr, quantileWO_upr - quantileWO_lwr )
quantileGPC2_lwr=quantile(GPC_trans, 0.025)
quantileGPC2_upr=quantile(GPC_trans, 0.975)
c(quantileGPC2_lwr, quantileGPC2_upr, quantileGPC2_upr - quantileGPC2_lwr )
colnames(results_df) = c("val_GPC", "val_WR","val_WO" ,"p_val_GPC", "p_val_WR", "p_val_WO","Win_Edp1","Loose_Edp1","Tie_Edp1","Win_Edp2","Loose_Edp2","Tie_Edp2","Win_Edp3","Loose_Edp3","Tie_Edp3")
Win   = round(c(mean(as.numeric(results_df$Win_Edp1)), mean(as.numeric(results_df$Win_Edp2)), mean(as.numeric(results_df$Win_Edp3)), mean(as.numeric(results_df$Win_Edp1)) + mean(as.numeric(results_df$Win_Edp2)) +mean(as.numeric(results_df$Win_Edp3)) ))
Loose = round(c(mean(as.numeric(results_df$Loose_Edp1)), mean(as.numeric(results_df$Loose_Edp2)),mean(as.numeric(results_df$Loose_Edp3)), mean(as.numeric(results_df$Loose_Edp1))+mean(as.numeric(results_df$Loose_Edp2)) +mean(as.numeric(results_df$Loose_Edp3)) ))
Tie   = round(c(mean(as.numeric(results_df$Tie_Edp1)), mean(as.numeric(results_df$Tie_Edp2)), mean(as.numeric(results_df$Tie_Edp3)), mean(as.numeric(results_df$Tie_Edp3)) ))
df312_2 = data.frame(
row.names = c("endpoint1", "endpoint2",  "endpoint3","overall"),
Win   = Win,
Loose = Loose,
Tie   = Tie,
WR = round(Win/Loose,5),
WO = round((Win+0.5*Tie)/(Loose+0.5*Tie),5),
GPC = round((Win-Loose)/(Win+Loose+Tie),5),
GPC_trans = round(((Win-Loose)/(Win+Loose+Tie)+1)/(1-(Win-Loose)/(Win+Loose+Tie)),5)
)
View(df312_2)
write.csv(df312_2, file = "df312_2.csv")
pvals_long = results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "p_value") %>%
mutate(method = recode(method,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
pvals_long$p_value = unlist(pvals_long$p_value)
vlines = data.frame(
method = c("GPC", "WR", "WO"),
intercept = c(0, 1, 1),
linetype_label = "Hypothèse H0")
values_long = results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "value") %>%
mutate(method = recode(method,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
values_long$value = unlist(values_long$value)
values_long <- values_long %>% filter(!is.infinite(value))
ggplot(values_long, aes(x = value, fill = method)) +
geom_density(alpha = 0.6, color = "black") +
geom_vline(data = vlines, aes(xintercept = intercept, linetype = linetype_label),
color = "black", lwd = 1) +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_linetype_manual(name = "", values = c("Hypothèse H0" = "dashed")) +
scale_fill_manual(values = c("orange", "purple", "cyan"))+ coord_cartesian(xlim = c(-1, 5))+
annotate("text", x = 4.5, y = 1.1, label = paste("Étendue GPC : ", étendue_GPC), color = "orange", hjust = 1) +
annotate("text", x = 4.5, y = 1.5, label = paste("Étendue WR : ", étendue_WR), color = "purple", hjust = 1) +
annotate("text", x = 4.5, y = 2.1, label = paste("Étendue WO : ", étendue_WO), color = "cyan", hjust = 1)
#ggsave("Rplot1_11.pdf", device = "pdf", path = "../plots")
p_val_GPC=subset(pvals_long, method=="GPC")
p_val_WO=subset(pvals_long, method=="WO")
p_val_WR=subset(pvals_long, method=="WR")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour la GPC : ",100*sum(p_val_GPC$p_value < 0.05)/nrow(p_val_GPC),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WR : ",100*sum(p_val_WR$p_value < 0.05)/nrow(p_val_WR),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WO : ",100*sum(p_val_WO$p_value < 0.05)/nrow(p_val_WO),"% \n")
n_sim = 2000
n=200
nb_core = parallel::detectCores() - 2
cl = makeCluster(nb_core)
registerDoParallel(cl)
count = 0
start_time = Sys.time()
lambda = c(0.5,0.1,0.05)
k = c(0.5, 0.1, 0.05)
beta = c(0.5, 0.4, 0.3, 0.7)
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival", "parallel", "foreach", "doParallel", "WINS"), .export = c("win.stat")) %dopar% {
set.seed(s)
id=1:(2*n)
arm=rep(c("T","C"), each=200)
U = runif(2*n)
lambdaT = 0.1
kT = 0.1
Z = ifelse(arm == "T", 1, 0)
beta = 0.3
prob_T = 0.65
prob_C = 0.35
mean_T = 3
mean_C = 2
sd_T = 2
sd_C = 2
Time_1 = round((-log(1 - U)) / (lambdaT * exp(beta * Z)^(1 / kT)),3)
fup_censureT = round(rweibull(n, shape = 1, scale =1),3)
Time_T = pmin(Time_1, fup_censureT)
deltaT=as.numeric(fup_censureT==Time_T)
Y_2_T=as.numeric(gener_binom(prob = prob_T)[,1] )-1
Y_2_C=as.numeric(gener_binom(prob = prob_C)[,1] )-1
Y_3_T= gener_continue(mean = mean_T, sd = sd_T)
Y_3_C= gener_continue(mean = mean_C, sd = sd_C)
stratum=sample(rep(c(1,3,5,8), each = 50))
dataT=data.frame(Y_1 = Time_T[Z==1], Delta_1 = deltaT[Z==1], Y_2 = Y_2_T, Y_3 = Y_3_T, stratum = stratum)
dataC=data.frame(Y_1 = Time_T[Z==0], Delta_1 = deltaT[Z==0], Y_2 = Y_2_C, Y_3 = Y_3_C, stratum = stratum)
data1=rbind(dataT,dataC)
data=data.frame(id=id, arm = arm, Y_1= data1[,1],Delta_1=data1[,2], Y_2 = data1[,3], Y_3 = data1[,4], stratum = data1[,5] )
result =
win.stat(
data = data,
ep_type = c("tte", "binary", "continuous"),
stratum.weight = "equal",
tau = c(1,0,1),
arm.name = c("T", "C"),
alpha = 0.05,
digit = 3,
pvalue = "two-sided",
priority = c(3, 2, 1),
summary.print = FALSE
)
win_edp1=sum(result$summary_ep$Trt_Endpoint1[,2])
loose_edp1=sum(result$summary_ep$Con_Endpoint1[,2])
tie_edp1=4*2500-sum(win_edp1+loose_edp1)
win_edp2=sum(result$summary_ep$Trt_Endpoint2[,2])
loose_edp2=sum(result$summary_ep$Con_Endpoint2[,2])
tie_edp2=tie_edp1-(loose_edp2+win_edp2)
win_edp3 = sum(result$summary_ep$Trt_Endpoint3[,2])
loose_edp3 = sum(result$summary_ep$Con_Endpoint3[,2])
tie_edp3 = tie_edp2-(win_edp3+loose_edp3)
count = count + 1
write.table(c(count), file="../output.txt", append = T, col.names = F)
val_GPC = result$Win_statistic$Net_Benefit[1]
val_WR  = result$Win_statistic$Win_Ratio[1]
val_WO  = result$Win_statistic$Win_Odds[1]
p_val_GPC = result$p_value[2]
p_val_WR  = result$p_value[1]
p_val_WO  = result$p_value[3]
return(unname(c(val_GPC,val_WR,val_WO,p_val_GPC, p_val_WR, p_val_WO,win_edp1,loose_edp1,tie_edp1,win_edp2,loose_edp2,tie_edp2,win_edp3,loose_edp3,tie_edp3)))
}
stopCluster(cl)
end_time = Sys.time()
execution_time = end_time - start_time
print(execution_time)
results_df = as.data.frame(results)
GPC=as.numeric(results_df[,1])
WR= as.numeric(results_df[,2])
WO= as.numeric(results_df[,3])
GPC_trans = (GPC+1)/(1-GPC)
quantileGPC_lwr=quantile(GPC, 0.025)
quantileGPC_upr=quantile(GPC, 0.975)
étendue_GPC= round(quantileGPC_upr - quantileGPC_lwr,4)
c(quantileGPC_lwr, quantileGPC_upr, quantileGPC_upr - quantileGPC_lwr )
quantileWR_lwr=quantile(WR, 0.025)
quantileWR_upr=quantile(WR, 0.975)
étendue_WR= round(quantileWR_upr - quantileWR_lwr,4)
c(quantileWR_lwr, quantileWR_upr, quantileWR_upr - quantileWR_lwr )
quantileWO_lwr=quantile(WO, 0.025)
quantileWO_upr=quantile(WO, 0.975)
étendue_WO= round(quantileWO_upr - quantileWO_lwr,4)
c(quantileWO_lwr, quantileWO_upr, quantileWO_upr - quantileWO_lwr )
quantileGPC2_lwr=quantile(GPC_trans, 0.025)
quantileGPC2_upr=quantile(GPC_trans, 0.975)
c(quantileGPC2_lwr, quantileGPC2_upr, quantileGPC2_upr - quantileGPC2_lwr )
colnames(results_df) = c("val_GPC", "val_WR","val_WO" ,"p_val_GPC", "p_val_WR", "p_val_WO","Win_Edp1","Loose_Edp1","Tie_Edp1","Win_Edp2","Loose_Edp2","Tie_Edp2","Win_Edp3","Loose_Edp3","Tie_Edp3")
Win   = round(c(mean(as.numeric(results_df$Win_Edp1)), mean(as.numeric(results_df$Win_Edp2)), mean(as.numeric(results_df$Win_Edp3)), mean(as.numeric(results_df$Win_Edp1)) + mean(as.numeric(results_df$Win_Edp2)) +mean(as.numeric(results_df$Win_Edp3)) ))
Loose = round(c(mean(as.numeric(results_df$Loose_Edp1)), mean(as.numeric(results_df$Loose_Edp2)),mean(as.numeric(results_df$Loose_Edp3)), mean(as.numeric(results_df$Loose_Edp1))+mean(as.numeric(results_df$Loose_Edp2)) +mean(as.numeric(results_df$Loose_Edp3)) ))
Tie   = round(c(mean(as.numeric(results_df$Tie_Edp1)), mean(as.numeric(results_df$Tie_Edp2)), mean(as.numeric(results_df$Tie_Edp3)), mean(as.numeric(results_df$Tie_Edp3)) ))
df321_2 = data.frame(
row.names = c("endpoint1", "endpoint2",  "endpoint3","overall"),
Win   = Win,
Loose = Loose,
Tie   = Tie,
WR = round(Win/Loose,5),
WO = round((Win+0.5*Tie)/(Loose+0.5*Tie),5),
GPC = round((Win-Loose)/(Win+Loose+Tie),5),
GPC_trans = round(((Win-Loose)/(Win+Loose+Tie)+1)/(1-(Win-Loose)/(Win+Loose+Tie)),5)
)
View(df321_2)
write.csv(df321_2, file = "df321_2.csv")
pvals_long = results_df %>%
select(starts_with("p_val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "p_value") %>%
mutate(method = recode(method,
"p_val_GPC" = "GPC",
"p_val_WR"  = "WR",
"p_val_WO"  = "WO"))
pvals_long$p_value = unlist(pvals_long$p_value)
vlines = data.frame(
method = c("GPC", "WR", "WO"),
intercept = c(0, 1, 1),
linetype_label = "Hypothèse H0")
values_long = results_df %>%
select(starts_with("val_")) %>%
pivot_longer(cols = everything(), names_to = "method", values_to = "value") %>%
mutate(method = recode(method,
"val_GPC" = "GPC",
"val_WR"  = "WR",
"val_WO"  = "WO"))
values_long$value = unlist(values_long$value)
values_long <- values_long %>% filter(!is.infinite(value))
ggplot(values_long, aes(x = value, fill = method)) +
geom_density(alpha = 0.6, color = "black") +
geom_vline(data = vlines, aes(xintercept = intercept, linetype = linetype_label),
color = "black", lwd = 1) +
theme_minimal() +
labs(title = "Distribution des statistiques de test",
x = "Valeur", y = "Densité") +
scale_linetype_manual(name = "", values = c("Hypothèse H0" = "dashed")) +
scale_fill_manual(values = c("orange", "purple", "cyan"))+ coord_cartesian(xlim = c(-1, 5))+
annotate("text", x = 4.5, y = 1.1, label = paste("Étendue GPC : ", étendue_GPC), color = "orange", hjust = 1) +
annotate("text", x = 4.5, y = 1.5, label = paste("Étendue WR : ", étendue_WR), color = "purple", hjust = 1) +
annotate("text", x = 4.5, y = 2.1, label = paste("Étendue WO : ", étendue_WO), color = "cyan", hjust = 1)
#ggsave("Rplot1_11.pdf", device = "pdf", path = "../plots")
p_val_GPC=subset(pvals_long, method=="GPC")
p_val_WO=subset(pvals_long, method=="WO")
p_val_WR=subset(pvals_long, method=="WR")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour la GPC : ",100*sum(p_val_GPC$p_value < 0.05)/nrow(p_val_GPC),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WR : ",100*sum(p_val_WR$p_value < 0.05)/nrow(p_val_WR),"% \n")
cat("Pourcentage de p-valeur rejettant H0 à 5% pour les WO : ",100*sum(p_val_WO$p_value < 0.05)/nrow(p_val_WO),"% \n")
