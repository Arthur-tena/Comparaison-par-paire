nrow(treatmentdata)
n_cores = detectCores()/2
cl = makeCluster(n_cores)
registerDoParallel(cl)
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
col = colnames(treatmentdata)
if (is.null(strata)){
L = ncol(treatmentdata)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = rbind(treatmentdata, controldata)
comp = data.frame(groupe = groupe, outcome = comp)
} else {
L = ncol(treatmentdata)-1
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
paire=affect_crit_strata(treatmentdata = treatmentdata, controldata = controldata, threshold = threshold, strata = strata)
View(resultats)
GPC_WO_WR_strata(treatmentdata,controldata, p.val="two.sided", strata=strata)
GPC_WO_WR_strata(treatmentdata,controldata, p.val="two.sided", strata=strata)
# GPC_WO_WR necesiite les package doParallele, parallele et foreach
# rentre en argument treatmentdata le nouveau traitrement, controldata le traitement de contrôle, threshold le seuil,
#   p.val le test unilatéral ou bilatéral et n_perm le nombre de permutation
# donne en sortie une liste de 3 dataframe avec les résultats de la GPC, des WR et des WO et leur p-valeur,
#    l'intervalle de confiance pour ces 3 valeurs et le nombre de win,lose et tie
GPC_WO_WR_strata = function(treatmentdata, controldata, threshold = 0, p.val = c("one.sided", "two.sided"), n_perm = 1000, strata=NULL) {
n_cores = detectCores()/2
cl = makeCluster(n_cores)
registerDoParallel(cl)
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
col = colnames(treatmentdata)
if (is.null(strata)){
L = ncol(treatmentdata)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = rbind(treatmentdata, controldata)
comp = data.frame(groupe = groupe, outcome = comp)
} else {
L = ncol(treatmentdata)-1
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
paire=affect_crit_strata(treatmentdata = treatmentdata, controldata = controldata, threshold = threshold, strata = strata)
stat_init = calcul_stat(paire)
N_w = stat_init[1]
N_l = stat_init[2]
N_t = stat_init[3]
Delta_obs = round((N_w - N_l) / (N_w+N_l+N_t), 3)
WR_obs = round(N_w/N_l,3)
WO_obs = round((N_w+0.5*N_t)/(N_l+0.5*N_t),3)
N_w_perm=rep(0, n_perm)
N_l_perm=rep(0, n_perm)
Delta_perm=rep(0, n_perm)
WR_perm=rep(0, n_perm)
WO_perm=rep(0, n_perm)
# Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
#                          .export = c("affect_crit_strata", "calcul_stat", "type_variable", "extract_tte")) %dopar% {
#
#                            comp_perm=comp
#                            comp_perm$groupe = sample(comp_perm$groupe)
#
#                            compT = subset(comp_perm, groupe == "T")[,-1]
#                            compC = subset(comp_perm, groupe == "C")[,-1]
#
#                            paire_perm = affect_crit_strata(compT, compC, threshold,strata)
#                            stat_perm = calcul_stat(paire_perm)
#
#                            N_w_perm = stat_perm[1]
#                            N_l_perm = stat_perm[2]
#                            N_t_perm = stat_perm[3]
#
#
#                            Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
#                            WR_perm = N_w_perm/N_l_perm
#                            WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
#
#
#                            return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
#                          }
#
# N_w_perm = Delta_perm_res[, 1]
# N_l_perm = Delta_perm_res[, 2]
# Delta_perm = Delta_perm_res[, 3]
# WR_perm = Delta_perm_res[, 4]
# WO_perm = Delta_perm_res[, 5]
#
# CI_GPC = quantile(Delta_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_GPC = c(Delta_obs + CI_GPC[1], Delta_obs + CI_GPC[2])
#
# CI_WR = quantile(WR_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_WR = c(WR_obs - CI_WR[1], WR_obs + CI_WR[2])
#
# CI_WO = quantile(WO_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_WO = c(WO_obs - CI_WO[1], WO_obs + CI_WO[2])
#
# hist(Delta_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation)",
#      xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(-1, 1))
# abline(v = Delta_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_GPC[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_GPC[2], col = "green", lwd = 2, lty = 2)
# abline(v=0, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "Δ_obs", "H0"), lwd=c(2,2,1), lty = c(2,2,1))
#
# hist(WR_perm, breaks = 30, main = "Distribution de WR sous H0 (permutation)",
#      xlab = "WR permuté", col = "lightblue", border = "black", xlim=c(0, 5))
# abline(v = WR_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_WR[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_WR[2], col = "green", lwd = 2, lty = 2)
# abline(v=1, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "WR_obs", "H0"), lwd=c(2,2,1), lty = c(2,2,1))
#
# hist(WO_perm, breaks = 30, main = "Distribution de WO sous H0 (permutation)",
#      xlab = "WO permuté", col = "lightblue", border = "black", xlim=c(0, 5))
# abline(v = WO_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_WO[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_WO[2], col = "green", lwd = 2, lty = 2)
# abline(v=1, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "WO_obs", "H0"), lwd=c(2,2,2), lty = c(2,2,1))
#
# # boxplot(WO_perm, main = "Distribution de WO sous H0", col = "lightblue")
# # points(1, WO_obs, col = "red", pch = 19, cex = 1.5)
#
# sigma_GPC = sd(Delta_perm)
# z_GPC = (Delta_obs) / sigma_GPC
#
# sigma_WR = sd(WR_perm)
# z_WR = (WR_obs - mean(WR_perm)) / sigma_WR
#
# sigma_WO = sd(WO_perm)
# z_WO = (WO_obs - mean(WO_perm)) / sigma_WO
#
# p_value_GPC = ifelse(p.val == "one.sided", mean(Delta_perm >= Delta_obs), 2*mean(abs(Delta_perm) >= abs(Delta_obs)))
# p_value_WR = ifelse(p.val == "one.sided", mean(WR_perm >= WR_obs), 2*mean(abs(WR_perm) >= abs(WR_obs)))
# p_value_WO = ifelse(p.val == "one.sided", mean(WO_perm >= WO_obs),2* mean(abs(WO_perm) >= abs(WO_obs)))
#
#
# signif_GPC = dplyr::case_when(
#   p_value_GPC < 0.001 ~ "***",
#   p_value_GPC < 0.01 ~ "**",
#   p_value_GPC < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# signif_WR = dplyr::case_when(
#   p_value_WR < 0.001 ~ "***",
#   p_value_WR < 0.01 ~ "**",
#   p_value_WR < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# signif_WO = dplyr::case_when(
#   p_value_WO < 0.001 ~ "***",
#   p_value_WO < 0.01 ~ "**",
#   p_value_WO < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# data1 = data.frame(
#   Method = c("GPC", "Win Ratio (WR)", "Win Odds (WO)"),
#   Estimate = c(Delta_obs, WR_obs, WO_obs),
#   Z_score = c(z_GPC, z_WR, z_WO),
#   P_value = c(p_value_GPC, p_value_WR, p_value_WO),
#   Signif. = c(signif_GPC, signif_WR, signif_WO)
# )
#
# data2 = data.frame(
#   Method = c("GPC", "WR", "WO"),
#   CI_lower = c(CI_GPC[1], CI_WR[1], CI_WO[1]),
#   CI_upper = c(CI_GPC[2], CI_WR[2], CI_WO[2])
# )
#
# #data3 = data.frame(Nb_win = N_w, Nb_lose = N_l, Nb_tie = N_t, row.names = "")
#
stopCluster(cl)
return(list(results = data1, confidence_intervals = data2))
}
GPC_WO_WR_strata(treatmentdata,controldata, p.val="two.sided", strata=strata)
# GPC_WO_WR necesiite les package doParallele, parallele et foreach
# rentre en argument treatmentdata le nouveau traitrement, controldata le traitement de contrôle, threshold le seuil,
#   p.val le test unilatéral ou bilatéral et n_perm le nombre de permutation
# donne en sortie une liste de 3 dataframe avec les résultats de la GPC, des WR et des WO et leur p-valeur,
#    l'intervalle de confiance pour ces 3 valeurs et le nombre de win,lose et tie
GPC_WO_WR_strata = function(treatmentdata, controldata, threshold = 0, p.val = c("one.sided", "two.sided"), n_perm = 1000, strata=NULL) {
n_cores = detectCores()/2
cl = makeCluster(n_cores)
registerDoParallel(cl)
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
col = colnames(treatmentdata)
if (is.null(strata)){
L = ncol(treatmentdata)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = rbind(treatmentdata, controldata)
comp = data.frame(groupe = groupe, outcome = comp)
} else {
L = ncol(treatmentdata)-1
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
}
paire=affect_crit_strata(treatmentdata = treatmentdata, controldata = controldata, threshold = threshold, strata = strata)
stat_init = calcul_stat(paire)
N_w = stat_init[1]
N_l = stat_init[2]
N_t = stat_init[3]
Delta_obs = round((N_w - N_l) / (N_w+N_l+N_t), 3)
WR_obs = round(N_w/N_l,3)
WO_obs = round((N_w+0.5*N_t)/(N_l+0.5*N_t),3)
N_w_perm=rep(0, n_perm)
N_l_perm=rep(0, n_perm)
Delta_perm=rep(0, n_perm)
WR_perm=rep(0, n_perm)
WO_perm=rep(0, n_perm)
# Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
#                          .export = c("affect_crit_strata", "calcul_stat", "type_variable", "extract_tte")) %dopar% {
#
#                            comp_perm=comp
#                            comp_perm$groupe = sample(comp_perm$groupe)
#
#                            compT = subset(comp_perm, groupe == "T")[,-1]
#                            compC = subset(comp_perm, groupe == "C")[,-1]
#
#                            paire_perm = affect_crit_strata(compT, compC, threshold,strata)
#                            stat_perm = calcul_stat(paire_perm)
#
#                            N_w_perm = stat_perm[1]
#                            N_l_perm = stat_perm[2]
#                            N_t_perm = stat_perm[3]
#
#
#                            Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
#                            WR_perm = N_w_perm/N_l_perm
#                            WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
#
#
#                            return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
#                          }
#
# N_w_perm = Delta_perm_res[, 1]
# N_l_perm = Delta_perm_res[, 2]
# Delta_perm = Delta_perm_res[, 3]
# WR_perm = Delta_perm_res[, 4]
# WO_perm = Delta_perm_res[, 5]
#
# CI_GPC = quantile(Delta_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_GPC = c(Delta_obs + CI_GPC[1], Delta_obs + CI_GPC[2])
#
# CI_WR = quantile(WR_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_WR = c(WR_obs - CI_WR[1], WR_obs + CI_WR[2])
#
# CI_WO = quantile(WO_perm, c(0.025, 0.975), na.rm = TRUE)
# CI_WO = c(WO_obs - CI_WO[1], WO_obs + CI_WO[2])
#
# hist(Delta_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation)",
#      xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(-1, 1))
# abline(v = Delta_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_GPC[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_GPC[2], col = "green", lwd = 2, lty = 2)
# abline(v=0, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "Δ_obs", "H0"), lwd=c(2,2,1), lty = c(2,2,1))
#
# hist(WR_perm, breaks = 30, main = "Distribution de WR sous H0 (permutation)",
#      xlab = "WR permuté", col = "lightblue", border = "black", xlim=c(0, 5))
# abline(v = WR_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_WR[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_WR[2], col = "green", lwd = 2, lty = 2)
# abline(v=1, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "WR_obs", "H0"), lwd=c(2,2,1), lty = c(2,2,1))
#
# hist(WO_perm, breaks = 30, main = "Distribution de WO sous H0 (permutation)",
#      xlab = "WO permuté", col = "lightblue", border = "black", xlim=c(0, 5))
# abline(v = WO_obs, col = "red", lwd = 2, lty = 2)
# abline(v=CI_WO[1], col = "green", lwd = 2, lty = 2)
# abline(v=CI_WO[2], col = "green", lwd = 2, lty = 2)
# abline(v=1, col='black', lwd = 2)
# legend('topright', col=c("green","red","black"), legend = c("95% CI", "WO_obs", "H0"), lwd=c(2,2,2), lty = c(2,2,1))
#
# # boxplot(WO_perm, main = "Distribution de WO sous H0", col = "lightblue")
# # points(1, WO_obs, col = "red", pch = 19, cex = 1.5)
#
# sigma_GPC = sd(Delta_perm)
# z_GPC = (Delta_obs) / sigma_GPC
#
# sigma_WR = sd(WR_perm)
# z_WR = (WR_obs - mean(WR_perm)) / sigma_WR
#
# sigma_WO = sd(WO_perm)
# z_WO = (WO_obs - mean(WO_perm)) / sigma_WO
#
# p_value_GPC = ifelse(p.val == "one.sided", mean(Delta_perm >= Delta_obs), 2*mean(abs(Delta_perm) >= abs(Delta_obs)))
# p_value_WR = ifelse(p.val == "one.sided", mean(WR_perm >= WR_obs), 2*mean(abs(WR_perm) >= abs(WR_obs)))
# p_value_WO = ifelse(p.val == "one.sided", mean(WO_perm >= WO_obs),2* mean(abs(WO_perm) >= abs(WO_obs)))
#
#
# signif_GPC = dplyr::case_when(
#   p_value_GPC < 0.001 ~ "***",
#   p_value_GPC < 0.01 ~ "**",
#   p_value_GPC < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# signif_WR = dplyr::case_when(
#   p_value_WR < 0.001 ~ "***",
#   p_value_WR < 0.01 ~ "**",
#   p_value_WR < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# signif_WO = dplyr::case_when(
#   p_value_WO < 0.001 ~ "***",
#   p_value_WO < 0.01 ~ "**",
#   p_value_WO < 0.05 ~ "*",
#   TRUE ~ ""
# )
#
# data1 = data.frame(
#   Method = c("GPC", "Win Ratio (WR)", "Win Odds (WO)"),
#   Estimate = c(Delta_obs, WR_obs, WO_obs),
#   Z_score = c(z_GPC, z_WR, z_WO),
#   P_value = c(p_value_GPC, p_value_WR, p_value_WO),
#   Signif. = c(signif_GPC, signif_WR, signif_WO)
# )
#
# data2 = data.frame(
#   Method = c("GPC", "WR", "WO"),
#   CI_lower = c(CI_GPC[1], CI_WR[1], CI_WO[1]),
#   CI_upper = c(CI_GPC[2], CI_WR[2], CI_WO[2])
# )
#
# #data3 = data.frame(Nb_win = N_w, Nb_lose = N_l, Nb_tie = N_t, row.names = "")
#
stopCluster(cl)
return("")#list(results = data1, confidence_intervals = data2))
}
GPC_WO_WR_strata(treatmentdata,controldata, p.val="two.sided", strata=strata)
Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
.export = c("affect_crit_strata", "calcul_stat", "type_variable", "extract_tte")) %dopar% {
comp_perm=comp
comp_perm$groupe = sample(comp_perm$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
stat_perm = calcul_stat(paire_perm)
N_w_perm = stat_perm[1]
N_l_perm = stat_perm[2]
N_t_perm = stat_perm[3]
Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
WR_perm = N_w_perm/N_l_perm
WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
}
Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
.export = c("affect_crit_strata", "calcul_stat", "type_variable", "extract_tte")) %dopar% {
comp_perm=comp
comp_perm$groupe = sample(comp_perm$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
stat_perm = calcul_stat(paire_perm)
N_w_perm = stat_perm[1]
N_l_perm = stat_perm[2]
N_t_perm = stat_perm[3]
Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
WR_perm = N_w_perm/N_l_perm
WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
}
Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival")) %dopar% {
comp_perm=comp
comp_perm$groupe = sample(comp_perm$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
stat_perm = calcul_stat(paire_perm)
N_w_perm = stat_perm[1]
N_l_perm = stat_perm[2]
N_t_perm = stat_perm[3]
Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
WR_perm = N_w_perm/N_l_perm
WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
}
comp_perm=comp
comp_perm$groupe = sample(comp_perm$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
compT
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
compT = subset(comp_perm, groupe == "T")
compC = subset(comp_perm, groupe == "C")
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit_strata(compT, compC, threshold,strata)
treatmentdata = compT
controldata= compC
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
col = colnames(treatmentdata)
col
if (is.null(strata)){
type1 = type_variable(treatmentdata, L)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe, outcome = rbind(treatmentdata, controldata))
}
else {
type1 = type_variable(treatmentdata[,-which(col=="strata")], L)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = data.frame(groupe = groupe,
outcome = rbind(treatmentdata[,-which(col=="strata")], controldata[,-which(col=="strata")]),
strata = c(treatmentdata$strata, controldata$strata))
comp
diff = comp[comp$groupe == "T", "outcome.X"][i] - comp[comp$groupe == "C", "outcome.X"][j]
if (is.na(diff)) {
return("non-informative")
}
hist(val_GPC)
n_sim = 1000
nb_core = (detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival"),
.export = c("affect_crit_strata", "calcul_stat", "type_variable",
"extract_tte", "GPC_WO_WR_strata", "gener_continue")) %dopar% {
strata = rep(c(1,3,5,8), each = 10)
treatmentdata = as.data.frame(cbind(gener_continue(4, 2), gener_continue(3.5, 1.5), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
# Convertir strata en facteur
treatmentdata$strata = as.factor(treatmentdata$strata)
controldata$strata = as.factor(controldata$strata)
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
n_sim = 1000
nb_core = (detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival"))) %dopar% {
n_sim = 1000
nb_core = (detectCores() / 2) - 1
cl = makeCluster(nb_core)
registerDoParallel(cl)
start_time = Sys.time()
results = foreach(s = 1:n_sim, .combine = rbind, .packages = c("dplyr", "survival")) %dopar% {
strata = rep(c(1,3,5,8), each = 10)
treatmentdata = as.data.frame(cbind(gener_continue(4, 2), gener_continue(3.5, 1.5), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
# Convertir strata en facteur
treatmentdata$strata = as.factor(treatmentdata$strata)
controldata$strata = as.factor(controldata$strata)
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata)
val_GPC = result$results[1,2]
val_WR  = result$results[2,2]
val_WO  = result$results[3,2]
p_val_GPC = result$results[1,4]
p_val_WR  = result$results[2,4]
p_val_WO  = result$results[3,4]
return(unname(c(val_GPC, val_WR, val_WO, p_val_GPC, p_val_WR, p_val_WO)))
}
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
setwd("~/Comparaison-par-paire/R")
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
treatmentdata = as.data.frame(cbind(gener_continue(4, 2), gener_continue(3.5, 1.5), strata))
controldata = as.data.frame(cbind(gener_continue(2.5, 1.5), gener_continue(2, 4), strata))
# Convertir strata en facteur
treatmentdata$strata = as.factor(treatmentdata$strata)
controldata$strata = as.factor(controldata$strata)
treatmentdata
controldata
result = GPC_WO_WR_strata(treatmentdata, controldata, p.val = "two.sided", strata = strata)
