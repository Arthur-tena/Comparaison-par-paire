library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
setwd("~/Comparaison-par-paire/R")
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
n=40
# tte/tte
T_1_1=cbind(gener_tte(1.1, 0.5),gener_tte(0.75,0.33))
C_1_1=cbind(gener_tte(0.8, 2.5),gener_tte(0.33,2.5))
# tte/continue
T_1_2=cbind(gener_tte(0.75, 0.75),gener_continue(2,1))
C_1_2=cbind(gener_tte(0.75,1.5),gener_continue(0,1))
# tte/binaire
T_1_3=cbind(gener_tte(0.75,0.5),gener_binom(0.75))
C_1_3=cbind(gener_tte(0.33,2.3),gener_binom(0.45))
# continue/continue
T_1_4=cbind(gener_continue(3,1),gener_continue(3,2))
C_1_4=cbind(gener_continue(2,1),gener_continue(1,1))
# continue/binaire
T_1_5=cbind(gener_continue(2.5,1),gener_binom(0.65))
C_1_5=cbind(gener_continue(0,2),gener_binom(0.35))
# binaire/binaire
T_1_6=cbind(gener_binom(0.75), gener_binom(0.65))
C_1_6=cbind(gener_binom(0.45), gener_binom(0.5))
# tte/tte
T_2_1=cbind(gener_tte(0.8, 2.5),gener_tte(0.33,2.5))
C_2_1=cbind(gener_tte(1.1, 0.5),gener_tte(0.75,0.33))
# tte/continue
T_2_2=cbind(gener_continue(0,1),gener_tte(0.75,1.5))
C_2_2=cbind(gener_continue(2,1),gener_tte(0.75, 0.75))
# tte/binaire
T_2_3=cbind(gener_tte(0.33,2.3),gener_binom(0.45))
C_2_3=cbind(gener_tte(0.75,0.5),gener_binom(0.75))
# continue/continue
T_2_4=cbind(gener_continue(2,1),gener_continue(1,1))
C_2_4=cbind(gener_continue(3,1),gener_continue(3,2))
# continue/binaire
T_2_5=cbind(gener_continue(0,2),gener_binom(0.35))
C_2_5=cbind(gener_continue(2.5,1),gener_binom(0.65))
# binaire/binaire
T_2_6=cbind(gener_binom(0.45), gener_binom(0.5))
C_2_6=cbind(gener_binom(0.75), gener_binom(0.65))
# tte/tte
T_3_1=cbind(gener_tte(0.8,1.2),gener_tte(0.35,1.3))
C_3_1=cbind(gener_tte(0.66,1.25),gener_tte(0.5,1))
# tte/continue
T_3_2=cbind(gener_tte(0.75,1.5),gener_continue(3,2))
C_3_2=cbind(gener_tte(0.5,1.5),gener_continue(2.5,2))
# tte/binaire
T_3_3=cbind(gener_tte(0.5,1),gener_binom(0.45))
C_3_3=cbind(gener_tte(0.7,1.3),gener_binom(0.5))
# continue/continue
T_3_4=cbind(gener_continue(4,2),gener_continue(3,2))
C_3_4=cbind(gener_continue(3,2),gener_continue(2,4))
# continue/binaire
T_3_5=cbind(gener_continue(3,1),gener_binom(0.45))
C_3_5=cbind(gener_continue(2.5,2),gener_binom(0.55))
# binaire/binaire
T_3_6=cbind(gener_binom(0.45), gener_binom(0.55))
C_3_6=cbind(gener_binom(0.4), gener_binom(0.6))
id=seq(1:(2*n))
trt=as.factor(rep(c("A","B"), c(n,n)))
data=rbind(T_3_4,C_3_4)
View(data)
data=cbind(id,trt,data)
colnames(data) = c("id", "arm", "Y_1", "Y_2")
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided")
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified")
dim(data)
colnames(data)
str(data)
is.numeric(data$Y_1)
is.numeric(data$Y_2)
trt=as.factor(rep(c("A","B"), c(n,n)))
data=rbind(T_3_4,C_3_4)
data=cbind(trt,data)
colnames(data) = c( "arm", "Y_1", "Y_2")
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified")
data
test_data <- data.frame(
arm = rep(c("A", "B"), each = 5),
Y_1 = runif(10, 0, 10),
Y_2 = runif(10, 0, 10)
)
win.stat(data = test_data, ep_type = c("continuous", "continuous"),
pvalue = "two-sided", stratum.weight = "unstratified")
head(data)
print(arm.name)
str(data$arm)
data$arm = as.character(data$arm)
str(data$arm)
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified")
id=seq(1:(2*n))
trt=as.factor(rep(c("A","B"), c(n,n)))
data=rbind(T_3_4,C_3_4)
data=cbind(trt,data)
colnames(data) = c("id","arm", "Y_1", "Y_2")
id=seq(1:(2*n))
trt=as.factor(rep(c("A","B"), c(n,n)))
data=rbind(T_3_4,C_3_4)
data=cbind(id,trt,data)
colnames(data) = c("id","arm", "Y_1", "Y_2")
data$arm = as.character(data$arm)
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified")
unique(data$arm)
win.stat(data = data, ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified", method = "unadjusted")
win.stat(data = data, priority = c(1,2) ,ep_type =c("continuous","continuous"), pvalue = "two-sided", stratum.weight = "unstratified", method = "unadjusted")
id=seq(1:(2*n))
trt=as.factor(rep(c("A","B"), c(n,n)))
id=seq(1:(2*n))
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
set.seed(123)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyr)
library(npsm)
library(survival)
library(coin)
library(gridExtra)
library(grid)
library(doParallel)
library(parallel)
library(foreach)
source("fonctions.R")
# Chunk 2
n=40
# tte/tte
T_1_1=cbind(gener_tte(1.1, 0.5),gener_tte(0.75,0.33))
C_1_1=cbind(gener_tte(0.8, 2.5),gener_tte(0.33,2.5))
# tte/continue
T_1_2=cbind(gener_tte(0.75, 0.75),gener_continue(2,1))
C_1_2=cbind(gener_tte(0.75,1.5),gener_continue(0,1))
# tte/binaire
T_1_3=cbind(gener_tte(0.75,0.5),gener_binom(0.75))
C_1_3=cbind(gener_tte(0.33,2.3),gener_binom(0.45))
# continue/continue
T_1_4=cbind(gener_continue(3,1),gener_continue(3,2))
C_1_4=cbind(gener_continue(2,1),gener_continue(1,1))
# continue/binaire
T_1_5=cbind(gener_continue(2.5,1),gener_binom(0.65))
C_1_5=cbind(gener_continue(0,2),gener_binom(0.35))
# binaire/binaire
T_1_6=cbind(gener_binom(0.75), gener_binom(0.65))
C_1_6=cbind(gener_binom(0.45), gener_binom(0.5))
# Chunk 3
#### continue/continue
data41=as.data.frame(cbind(T_1_4[,1], C_1_4[,1]))
data_long41 = data41 %>%
mutate(Groupe_T = "T", Groupe_C = "C") %>%
tidyr::pivot_longer(cols = c(V1, V2), names_to = "Variable", values_to = "Valeur") %>%
mutate(Groupe = ifelse(Variable == "V1", "T", "C"))
ggplot(data_long41, aes(x = Valeur, fill = Groupe)) +
geom_histogram(bins = 20, alpha = 0.5, color = "black", position = "identity") +
scale_fill_manual(values = c("T" = "darkblue", "C" = "darkred"), name = "Groupe") +
theme_classic()
data42=as.data.frame(cbind(T_1_4[,2], C_1_4[,2]))
data_long42 = data42 %>%
mutate(Groupe_T = "T", Groupe_C = "C") %>%
tidyr::pivot_longer(cols = c(V1, V2), names_to = "Variable", values_to = "Valeur") %>%
mutate(Groupe = ifelse(Variable == "V1", "T", "C"))
ggplot(data_long42, aes(x = Valeur, fill = Groupe)) +
geom_histogram(bins = 20, alpha = 0.5, color = "black", position = "identity") +
scale_fill_manual(values = c("T" = "darkblue", "C" = "darkred"), name = "Groupe") +
theme_classic() +labs(title = "continue/continue 2")
#### continue/binaire
data5=as.data.frame(cbind(T_1_5[,1],C_1_5[,1]))
data_long5 = data5 %>%
mutate(Groupe_T = "T", Groupe_C = "C") %>%
tidyr::pivot_longer(cols = c(V1, V2), names_to = "Variable", values_to = "Valeur") %>%
mutate(Groupe = ifelse(Variable == "V1", "T", "C"))
ggplot(data_long5, aes(x = Valeur, fill = Groupe)) +
geom_histogram(bins = 20, alpha = 0.5, color = "black", position = "identity") +
scale_fill_manual(values = c("T" = "darkblue", "C" = "darkred"), name = "Groupe") +
theme_classic()+labs(title = "continue/binaire")
#### binaire/binaire
data6=as.data.frame(cbind(T_1_6[,1],C_1_6[,1]))
data_long6 = data6 %>%
mutate(Groupe_T = "T", Groupe_C = "C") %>%
tidyr::pivot_longer(cols = c(V1, V2), names_to = "Variable", values_to = "Valeur") %>%
mutate(Groupe = ifelse(Variable == "V1", "T", "C"))
ggplot(data_long6, aes(x = Valeur, fill = Groupe)) +
geom_histogram(bins = 20, alpha = 0.5, color = "black", position = "identity") +
scale_fill_manual(values = c("T" = "darkblue", "C" = "darkred"), name = "Groupe") +
theme_classic() +labs(title = "binaire/binaire")
# Chunk 4
# tte/tte
T_2_1=cbind(gener_tte(0.8, 2.5),gener_tte(0.33,2.5))
C_2_1=cbind(gener_tte(1.1, 0.5),gener_tte(0.75,0.33))
# tte/continue
T_2_2=cbind(gener_continue(0,1),gener_tte(0.75,1.5))
C_2_2=cbind(gener_continue(2,1),gener_tte(0.75, 0.75))
# tte/binaire
T_2_3=cbind(gener_tte(0.33,2.3),gener_binom(0.45))
C_2_3=cbind(gener_tte(0.75,0.5),gener_binom(0.75))
# continue/continue
T_2_4=cbind(gener_continue(2,1),gener_continue(1,1))
C_2_4=cbind(gener_continue(3,1),gener_continue(3,2))
# continue/binaire
T_2_5=cbind(gener_continue(0,2),gener_binom(0.35))
C_2_5=cbind(gener_continue(2.5,1),gener_binom(0.65))
# binaire/binaire
T_2_6=cbind(gener_binom(0.45), gener_binom(0.5))
C_2_6=cbind(gener_binom(0.75), gener_binom(0.65))
# Chunk 5
# tte/tte
T_3_1=cbind(gener_tte(0.8,1.2),gener_tte(0.35,1.3))
C_3_1=cbind(gener_tte(0.66,1.25),gener_tte(0.5,1))
# tte/continue
T_3_2=cbind(gener_tte(0.75,1.5),gener_continue(3,2))
C_3_2=cbind(gener_tte(0.5,1.5),gener_continue(2.5,2))
# tte/binaire
T_3_3=cbind(gener_tte(0.5,1),gener_binom(0.45))
C_3_3=cbind(gener_tte(0.7,1.3),gener_binom(0.5))
# continue/continue
T_3_4=cbind(gener_continue(4,2),gener_continue(3,2))
C_3_4=cbind(gener_continue(3,2),gener_continue(2,4))
# continue/binaire
T_3_5=cbind(gener_continue(3,1),gener_binom(0.45))
C_3_5=cbind(gener_continue(2.5,2),gener_binom(0.55))
# binaire/binaire
T_3_6=cbind(gener_binom(0.45), gener_binom(0.55))
C_3_6=cbind(gener_binom(0.4), gener_binom(0.6))
id=seq(1:(2*n))
trt=as.factor(rep(c("A","B"), c(n,n)))
data=rbind(T_3_4,C_3_4)
data=cbind(id,trt,data)
colnames(data) = c("id","arm", "Y_1", "Y_2")
data$arm = as.character(data$arm)
priority = c(1,2)
ep_type =c("continuous","continuous")
pvalue = "two-sided"
stratum.weight = "unstratified"
method = "unadjusted"
#### match the argument
pvalue = match.arg(pvalue)
stratum.weight = match.arg(stratum.weight)
#### Remove missing values
colname.ds = colnames(data)
if(sum(is.na(data))>0){
if(max(c("arm","trt","treat","treatment")%in%colname.ds)==TRUE){
arm0 = data[,which(colname.ds%in%c("arm","trt","treat","treatment"))]
}else{
stop("The treatment variable is not found. Please rename the treatment variable to arm, trt, treat or treatment.")
}
ind.missing.trt = which(apply(data[arm0==arm.name[1],], 1, func<-function(x) sum(is.na(x))>0))
ind.missing.con = which(apply(data[arm0==arm.name[2],], 1, func<-function(x) sum(is.na(x))>0))
if(is.null(Z_t_trt) == FALSE){
if("id"%in%colname.ds==TRUE){
if(length(ind.missing.trt) > 0){
id_trt0 = data[arm0==arm.name[1],which(colname.ds%in%c("id"))]
Z_t_trt = Z_t_trt[Z_t_trt$id %in% id_trt0[-ind.missing.trt],]
}
if(length(ind.missing.con) > 0){
id_con0 = data[arm0==arm.name[2],which(colname.ds%in%c("id"))]
Z_t_con = Z_t_con[Z_t_con$id %in% id_con0[-ind.missing.con],]
}
}else{
stop("The id variable is not found in Z_t_trt and Z_t_con.")
}
}
data = na.omit(data)
cat(length(ind.missing.trt)," and ",length(ind.missing.con),
" objects with missing values are removed in the treatment and control group, respectively.","\n")
warning("All the data entered of these objects will be removed due to incomplete/missing data.")
}
#### obtain the number of endpoints and total number of individuals
n_ep = length(priority)
n_total = dim(data)[1]
#### If ep_type is input as scalar, treat all the endpoints as the same type.
if(length(ep_type)==1){
cat("The outcome type for all the endpoints: ",ep_type,"\n")
ep_type = rep(ep_type,n_ep)
}else if(length(ep_type)!=n_ep){
stop("The length of priority does not match the number of endpoints.")
}
#### If tau is input as scalar, treat all the tau as the same.
if(length(tau)==1){
tau = rep(tau,n_ep)
}
tau=0
#### If tau is input as scalar, treat all the tau as the same.
if(length(tau)==1){
tau = rep(tau,n_ep)
}
if("smaller"%in%np_direction & method %in% c("ipcw","covipcw")){
stop("The IPCW-adjusted approach is not applicable if smaller is specified for any endpoint in np_direction. Please try another method.")
}
#############################################################################################
#### Reorganize the data
#############################################################################################
if(max(c("arm","trt","treat","treatment")%in%colname.ds)==TRUE){
arm = data[,which(colname.ds%in%c("arm","trt","treat","treatment"))]
}else{
stop("The treatment variable is not found. Please rename the treatment variable to arm, trt, treat or treatment.")
}
#### obtain the number of treatment and control
n_trt = sum(arm==arm.name[1]); n_con = sum(arm==arm.name[2])
if("id"%in%colname.ds==TRUE){
id_trt = data[arm==arm.name[1],which(colname.ds%in%c("id"))]
id_con = data[arm==arm.name[2],which(colname.ds%in%c("id"))]
}else{
id_trt = 1:n_trt; id_con = 1:n_con
}
ind.missing.trt = which(apply(data[arm0==arm.name[1],], 1, func<-function(x) sum(is.na(x))>0))
ind.missing.con = which(apply(data[arm0==arm.name[2],], 1, func<-function(x) sum(is.na(x))>0))
arm0 = data[,which(colname.ds%in%c("arm","trt","treat","treatment"))]
ind.missing.trt = which(apply(data[arm0==arm.name[1],], 1, func<-function(x) sum(is.na(x))>0))
ind.missing.con = which(apply(data[arm0==arm.name[2],], 1, func<-function(x) sum(is.na(x))>0))
sum(is.na(data))>0
is.na(data)
is.na(data)
sum(is.na(data))>0
if(sum(is.na(data))=>0){
if(sum(is.na(data))>=0){
if(max(c("arm","trt","treat","treatment")%in%colname.ds)==TRUE){
arm0 = data[,which(colname.ds%in%c("arm","trt","treat","treatment"))]
}else{
stop("The treatment variable is not found. Please rename the treatment variable to arm, trt, treat or treatment.")
}
ind.missing.trt = which(apply(data[arm0==arm.name[1],], 1, func<-function(x) sum(is.na(x))>0))
ind.missing.con = which(apply(data[arm0==arm.name[2],], 1, func<-function(x) sum(is.na(x))>0))
if(is.null(Z_t_trt) == FALSE){
if("id"%in%colname.ds==TRUE){
if(length(ind.missing.trt) > 0){
id_trt0 = data[arm0==arm.name[1],which(colname.ds%in%c("id"))]
Z_t_trt = Z_t_trt[Z_t_trt$id %in% id_trt0[-ind.missing.trt],]
}
if(length(ind.missing.con) > 0){
id_con0 = data[arm0==arm.name[2],which(colname.ds%in%c("id"))]
Z_t_con = Z_t_con[Z_t_con$id %in% id_con0[-ind.missing.con],]
}
}else{
stop("The id variable is not found in Z_t_trt and Z_t_con.")
}
}
data = na.omit(data)
cat(length(ind.missing.trt)," and ",length(ind.missing.con),
" objects with missing values are removed in the treatment and control group, respectively.","\n")
warning("All the data entered of these objects will be removed due to incomplete/missing data.")
}
if(sum(is.na(data))>0){
if(max(c("arm","trt","treat","treatment")%in%colname.ds)==TRUE){
arm0 = data[,which(colname.ds%in%c("arm","trt","treat","treatment"))]
}else{
stop("The treatment variable is not found. Please rename the treatment variable to arm, trt, treat or treatment.")
}
ind.missing.trt = which(apply(data[arm0==arm.name[1],], 1, func<-function(x) sum(is.na(x))>0))
ind.missing.con = which(apply(data[arm0==arm.name[2],], 1, func<-function(x) sum(is.na(x))>0))
if(is.null(Z_t_trt) == FALSE){
if("id"%in%colname.ds==TRUE){
if(length(ind.missing.trt) > 0){
id_trt0 = data[arm0==arm.name[1],which(colname.ds%in%c("id"))]
Z_t_trt = Z_t_trt[Z_t_trt$id %in% id_trt0[-ind.missing.trt],]
}
if(length(ind.missing.con) > 0){
id_con0 = data[arm0==arm.name[2],which(colname.ds%in%c("id"))]
Z_t_con = Z_t_con[Z_t_con$id %in% id_con0[-ind.missing.con],]
}
}else{
stop("The id variable is not found in Z_t_trt and Z_t_con.")
}
}
data = na.omit(data)
cat(length(ind.missing.trt)," and ",length(ind.missing.con),
" objects with missing values are removed in the treatment and control group, respectively.","\n")
warning("All the data entered of these objects will be removed due to incomplete/missing data.")
}
p_value_GPC = ifelse(p.val == "one.sided", mean(Delta_perm >= Delta_obs), 2*mean(abs(Delta_perm) >= abs(Delta_obs)))
p_value_WR = ifelse(p.val == "one.sided", mean(WR_perm >= WR_obs), 2*mean(abs(WR_perm) >= abs(WR_obs)))
# GPC_WO_WR necesiite les package doParallele, parallele et foreach
# rentre en argument treatmentdata le nouveau traitrement, controldata le traitement de contrôle, threshold le seuil,
#   p.val le test unilatéral ou bilatéral et n_perm le nombre de permutation
# donne en sortie une liste de 3 dataframe avec les résultats de la GPC, des WR et des WO et leur p-valeur,
#    l'intervalle de confiance pour ces 3 valeurs et le nombre de win,lose et tie
GPC_WO_WR = function(treatmentdata, controldata, threshold = 0, p.val = c("one.sided", "two.sided"), n_perm = 1000) {
n_cores = detectCores()-3
cl = makeCluster(n_cores)
registerDoParallel(cl)
n1 = nrow(treatmentdata)
n2 = nrow(controldata)
L = ncol(treatmentdata)
groupe = as.factor(rep(c("T", "C"), c(n1, n2)))
comp = rbind(treatmentdata, controldata)
comp = data.frame(groupe = groupe, outcome = comp)
paire = affect_crit(treatmentdata, controldata, threshold)
stat_init = calcul_stat(paire)
N_w = stat_init[1]
N_l = stat_init[2]
N_t = stat_init[3]
Delta_obs = round((N_w - N_l) / (n1 * n2), 3)
WR_obs = round(N_w/N_l,3)
WO_obs = round((N_w+0.5*N_t)/(N_l+0.5*N_t),3)
N_w_perm=rep(0, n_perm)
N_l_perm=rep(0, n_perm)
Delta_perm=rep(0, n_perm)
WR_perm=rep(0, n_perm)
WO_perm=rep(0, n_perm)
Delta_perm_res = foreach(s = 1:n_perm, .combine = rbind, .packages = c("dplyr", "survival"),
.export = c("affect_crit", "calcul_stat", "type_variable", "extract_tte")) %dopar% {
comp_perm = comp
comp_perm$groupe = sample(comp$groupe)
compT = subset(comp_perm, groupe == "T")[,-1]
compC = subset(comp_perm, groupe == "C")[,-1]
paire_perm = affect_crit(compT, compC, threshold)
stat_perm = calcul_stat(paire_perm)
N_w_perm = stat_perm[1]
N_l_perm = stat_perm[2]
N_t_perm = stat_perm[3]
Delta_perm = (N_w_perm - N_l_perm) / (n1 * n2)
WR_perm = N_w_perm/N_l_perm
WO_perm = (N_w_perm+0.5*N_t_perm)/(N_l_perm+0.5*N_t_perm)
return(unname(c(N_w_perm,N_l_perm,Delta_perm, WR_perm,WO_perm)))
}
N_w_perm = Delta_perm_res[, 1]
N_l_perm = Delta_perm_res[, 2]
Delta_perm = Delta_perm_res[, 3]
WR_perm = Delta_perm_res[, 4]
WO_perm = Delta_perm_res[, 5]
CI_GPC = quantile(Delta_perm, c(0.025, 0.975), na.rm = TRUE)
#CI_GPC = c(Delta_obs - CI_GPC[1], Delta_obs + CI_GPC[2])
CI_WR = quantile(WR_perm, c(0.025, 0.975), na.rm = TRUE)
#CI_WR = c(WR_obs - CI_WR[1], WR_obs + CI_WR[2])
CI_WO = quantile(WO_perm, c(0.025, 0.975), na.rm = TRUE)
#CI_WO = c(WO_obs - CI_WO[1], WO_obs + CI_WO[2])
hist(Delta_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation), GPC",
xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(-1, 1))
abline(v = Delta_obs, col = "red", lwd = 2, lty = 2)
abline(v=CI_GPC[1], col = "green", lwd = 2, lty = 2)
abline(v=CI_GPC[2], col = "green", lwd = 2, lty = 2)
hist(WR_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation), WR",
xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(0, 5))
abline(v = WR_obs, col = "red", lwd = 2, lty = 2)
abline(v=CI_WR[1], col = "green", lwd = 2, lty = 2)
abline(v=CI_WR[2], col = "green", lwd = 2, lty = 2)
hist(WO_perm, breaks = 30, main = "Distribution de Δ sous H0 (permutation), WO",
xlab = "Δ permuté", col = "lightblue", border = "black", xlim=c(0, 5))
abline(v = WO_obs, col = "red", lwd = 2, lty = 2)
abline(v=CI_WO[1], col = "green", lwd = 2, lty = 2)
abline(v=CI_WO[2], col = "green", lwd = 2, lty = 2)
# boxplot(WO_perm, main = "Distribution de WO sous H0", col = "lightblue")
# points(1, WO_obs, col = "red", pch = 19, cex = 1.5)
sigma_GPC = sd(Delta_perm)
z_GPC = (Delta_obs) / sigma_GPC
sigma_WR = sd(WR_perm)
z_WR = (WR_obs - mean(WR_perm)) / sigma_WR
sigma_WO = sd(WO_perm)
z_WO = (WO_obs - mean(WO_perm)) / sigma_WO
p_value_GPC = ifelse(p.val == "one.sided", mean(Delta_perm >= Delta_obs), 2*mean(abs(Delta_perm) >= abs(Delta_obs)))
p_value_WR = ifelse(p.val == "one.sided", mean(WR_perm >= WR_obs), 2*mean(abs(WR_perm) >= abs(WR_obs)))
p_value_WO = ifelse(p.val == "one.sided", mean(WO_perm >= WO_obs),2* mean(abs(WO_perm) >= abs(WO_obs)))
signif_GPC = dplyr::case_when(
p_value_GPC < 0.001 ~ "***",
p_value_GPC < 0.01 ~ "**",
p_value_GPC < 0.05 ~ "*",
TRUE ~ ""
)
signif_WR = dplyr::case_when(
p_value_WR < 0.001 ~ "***",
p_value_WR < 0.01 ~ "**",
p_value_WR < 0.05 ~ "*",
TRUE ~ ""
)
signif_WO = dplyr::case_when(
p_value_WO < 0.001 ~ "***",
p_value_WO < 0.01 ~ "**",
p_value_WO < 0.05 ~ "*",
TRUE ~ ""
)
data1 <- data.frame(
Method = c("GPC", "Win Ratio (WR)", "Win Odds (WO)"),
Estimate = c(Delta_obs, WR_obs, WO_obs),
Z_score = c(z_GPC, z_WR, z_WO),
P_value = c(p_value_GPC, p_value_WR, p_value_WO),
Signif. = c(signif_GPC, signif_WR, signif_WO)
)
data2 = data.frame(
Method = c("GPC", "WR", "WO"),
CI_lower = c(CI_GPC[1], CI_WR[1], CI_WO[1]),
CI_upper = c(CI_GPC[2], CI_WR[2], CI_WO[2])
)
#data3 = data.frame(Nb_win = N_w, Nb_lose = N_l, Nb_tie = N_t, row.names = "")
stopCluster(cl)
return(list(results = data1, confidence_intervals = data2))
}
t1=Sys.time()
GPC_WO_WR(T_1_4,C_1_4, threshold = 0.25 ,p.val = "two.sided", n_perm = 1000)
t2=Sys.time()
t2-t1
